Do not change anything except what’s written below. Ask me first if anything is unclear.
Spares – Scope

    Keep UI, columns, buttons, styling, and layouts exactly as they are.

    Add Spare and Bulk Update Spares flows are already correct → do not modify.

    Implement tree/data parity with Components, make filters/search fully functional, and make History live.

1) Left Pane – Component Tree (parity)

    Use the exact same tree datasource/component as the Components sub-module (same numbering, labels, expand/collapse).

    Selecting any node filters the right-hand list to spares linked to that node or its descendants.

    The selected node should stay highlighted and persist through pagination/search until cleared.

Linking rule: each spare has componentId (or componentCode) → match by that and include children via hierarchical path prefix (e.g., 6.1 matches 6.1.*).
2) Filters & Search (must work together)

    Vessel dropdown: filters by vesselId.

    Search parts or components…: free text search across:

        partCode, partName, componentName, componentCode, location

    Criticality filter: All | Critical | Non-critical

    Stock filter: All | OK | Low (Low = ROB < Min)

    Clear: resets all filters + tree selection and reloads full list.

Rules

    Combine filters with AND logic.

    Search is case-insensitive, partial match.

    Pagination reflects filtered result count.

3) Inventory math (server-side, single source of truth)

    Maintain per spare:

        ROB (remaining on board) – integer

        Min – integer

        StockStatus (derived): OK if ROB >= Min, else Low

    Do not compute in UI; derive on the server or in a shared service.

4) Actions in the list (no UI change, just wiring)

Existing icons stay as-is. Bind them as follows:

    Edit (pencil): opens existing edit spare modal (unchanged).

    Consume (minus icon): opens a small modal with:

        Quantity (required, >0), Date (required), Work Order (optional), Remarks (optional)

        On Save:

            ROB = ROB – qty

            Append a history row (see §5)

            Recompute StockStatus

            Update the row immediately (no page refresh)

    Receive (plus icon): similar modal:

        Quantity (required, >0), Date (required), Supplier/PO (optional), Remarks (optional)

        On Save:

            ROB = ROB + qty

            Append history row

            Recompute StockStatus

            Update UI instantly

    Delete (bin): existing behavior (do not touch). If deletion is soft, keep history intact.

Validation:

    Quantities must be integers ≥1 (or support decimals if you already do—keep current behavior).

    Block consume if it would make ROB negative; show “Insufficient stock”.

5) History tab – real-time

    Inventory and History tabs share the same datasource; History reflects events immediately after any save (consume/receive/add/edit/bulk).

    History event schema:

        id, timestampUTC, vesselId, partId, partCode, partName, componentId, componentCode, componentName, eventType ('CONSUME'|'RECEIVE'|'ADJUST'|'CREATE'|'EDIT'), qtyChange (+/-), robAfter, userId, remarks, ref (WO/PO optional)

    History list default sort: timestamp desc.

    Filters on History:

        Date range, eventType, search (partCode/partName/componentCode)

    No UI redesign—use existing History tab layout; just bind data.

6) Bulk Update Spares (unchanged behavior)

    Keep current bulk dialog and validation.

    After bulk save:

        Update ROB and StockStatus for affected rows.

        Write one history row per changed item (eventType ADJUST).

        Reflect changes in Inventory and History immediately.

7) Performance & integrity

    All reads use left joins so parts with no history still appear.

    Use transactions so ROB and the matching history row commit together.

    Record userId from current session for every event.

    Timezone: store event time in UTC, display in user’s/vessel’s local timezone (keep existing display format).

8) Acceptance checks (must pass)

    Tree matches Components; selecting 6.1 Main Engine shows only its spares and children.

    Search “injector” + Criticality: Critical + Stock: Low returns only matching rows.

    Consume 1 qty of SP-ME-001 → ROB decrements in the row; History shows the event immediately.

    Receive 2 qty → ROB increments; History shows event; Stock badge flips from Low→OK if threshold crossed.

    Bulk update changes multiple rows and writes multiple history entries; Inventory/History reflect instantly.

    Add Spare and Bulk Upload Spares flows are unchanged and still work.

If anything conflicts with current code, pause and ask before deviating.