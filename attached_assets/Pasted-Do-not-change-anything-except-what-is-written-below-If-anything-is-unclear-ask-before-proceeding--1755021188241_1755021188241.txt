Do not change anything except what is written below. If anything is unclear, ask before proceeding.
Modify PMS — Change Requests
Fix: Target Selector overlay (Components / Work Orders / Spares / Stores)
Scope (very important)

    Replace the current blank “Select Target” popup with a two-pane, data-backed selector that reuses the existing list/tree components from each module.

    This feature is only used inside the Change Request flow. Do NOT modify the original Components, Work Orders, Spares, or Stores pages or their APIs.

    On confirmation, return a clean payload and build a read-only snapshot (same structure as Phase 1.1 spec).

A) Overlay structure (common to all categories)

    Fullscreen modal with:

        Header: “Select Target {Category}”

        Left pane (~60%): the actual browser/list for the chosen category

        Right pane (~40%): read-only preview for the currently highlighted item

        Footer: Cancel and primary Use this target (disabled until a row/node is selected)

B) Category-specific behavior (reuse existing components)
1) Components

    Left pane: reuse the existing Component Tree component (the same one used on the Components module left). Include search and expand/collapse behavior exactly as in that screen.

    Node click → Right pane preview (read-only):

        Header: Name, Code, and full path (e.g., 6.1.1.2 Cylinder Liners)

        Show Section A – Component Information fields only:

            Maker, Model, Serial No, Department, Component Category (not “Equipment Category”), Location, Commissioned Date, Critical, Class Item

    Use this target → resolve { targetType: 'component', targetId } and build a snapshot (see Section D).

2) Work Orders

    Left pane: reuse the Work Orders table (same columns and filters as the Work Orders submodule: search, vessel, rank, component, criticality). Pagination allowed.

    Row click → Right pane preview (read-only):

        WO No, Job Title, Component (name + code), Frequency type and value (+ unit), Assigned To, Priority, Status, Due Date (if available)

    Use this target → { targetType: 'work_order', targetId } + snapshot.

3) Spares

    Left pane: reuse the Spares Inventory table (Inventory tab) with search and filters (Criticality, Stock).

    Row click → Right pane preview:

        Part Code, Part Name, Linked Component (name + code if linked), UOM, Min, ROB, Location, Critical

    Use this target → { targetType: 'spare', targetId } + snapshot.

4) Stores

    Left pane: reuse the Stores table (Stores tab) with search and filters (Category, Stock).

    Row click → Right pane preview:

        Item Code, Item Name, Stores Category, UOM, Min, ROB, Location

    Use this target → { targetType: 'store', targetId } + snapshot.

    Important: Import the existing list/tree components (read-only) rather than reimplementing them. Pass a prop like mode="select" to disable create/edit/delete actions inside the overlay.

C) “Use this target” payload

On confirm, close overlay and call the change-request form’s handler with:

{
  targetType: 'component' | 'work_order' | 'spare' | 'store',
  targetId: string | number,
  targetDisplay: {
    name: string,          // e.g., "Cylinder Liners"
    code: string,          // e.g., "6.1.1.2" or "WO-2025-03" / "SP-ME-001" / "ST-TOOL-001"
    path?: string          // only for components (full path)
  },
  snapshotBeforeJson: {
    capturedAtUtc: "<ISO>",
    vesselId: "<id>",
    displayPath?: "<component path>",
    displayKey: "<code/WO No/Part Code/Item Code>",
    displayName: "<title/name>",
    fields: { ... }        // see Section D
  }
}

The parent form should then render the Target card and store targetType, targetId, and snapshotBeforeJson to the draft.
D) Snapshot building (read-only)

Build snapshotBeforeJson from the previewed item, with a stable fields map:

    Component

fields: {
  maker, model, serialNo, department, componentCategory,
  location, commissionedDate, critical, classItem
}

    displayPath = full path, displayKey = component code

Work Order

fields: {
  jobTitle, frequencyType, frequencyValue, frequencyUnit,
  assignedTo, priority, status, dueDate
}

    displayKey = WO No

Spare

fields: {
  partCode, partName, linkedComponentName, linkedComponentCode,
  uom, min, rob, location, critical
}

    displayKey = Part Code

Store

    fields: {
      itemCode, itemName, storesCategory,
      uom, min, rob, location
    }

        displayKey = Item Code

    Always include capturedAtUtc (ISO) and vesselId.

Do not include attachments or large blobs.
E) UI/UX details

    Default state: Use this target disabled until a row/node is selected.

    Loading and empty states for the left pane (reuse skeleton/empty states from the original components).

    Keyboard: Enter on a selected row triggers Use this target.

    Do not allow edits from inside this overlay (pure browse & preview).

    Do not mutate any PMS data.

F) Guard rails

    Do not alter or refactor the original module screens.

    Do not change any entity’s data, codes, due dates, or stocks.

    All new code must live under the Change Request feature namespace/module.

    If a selector fails to load data, show a non-blocking error message in the left pane and keep Use this target disabled.

G) Acceptance checks

    Opening Select Target shows the correct reused browser:

        Components → tree

        WO → WO table

        Spares → Spares table

        Stores → Stores table

    Selecting a node/row shows a read-only preview in the right pane with the fields listed above.

    Use this target returns the payload and snapshot exactly as specified, and the Target card appears on the form.

    The rest of the app is unchanged; no entities are modified.