Got it—“Loading forms…” means the Forms list never receives data (no forms seeded, API not returning, or the UI never leaves the loading state). Here’s a tight plan + a copy-paste prompt you can give the dev so this screen reliably shows the **three real forms** and never gets stuck.

---

# What needs to happen

1. **Seed the forms table** once with the 3 live schemas (exact mirrors):

   * **ADD\_COMPONENT**
   * **WO\_PLANNED**
   * **WO\_UNPLANNED**
     Create `form_definitions` + an initial **PUBLISHED v1** row in `form_versions` for each (with `schema_json` copied from the live forms).

2. **Implement the API** the list calls:

   * `GET /admin/forms` → returns an array with `{id, name, subgroup, latestVersionNo, latestVersionDate, status}`.
   * If no rows exist, the API should **seed** and return them (or return 200 with `[]`; the UI must then show a proper empty state, not infinite loader).

3. **Frontend: stop infinite loader**:

   * Replace the “Loading…” forever state with:

     * skeleton for ≤ 1.5s
     * then either the grid with rows, or a clean **Empty state** (“No forms found. Click ‘Rescan Live Forms’ to seed from the current application forms.”).
   * Add **error UI** when the fetch fails.
   * Add a **manual “Rescan Live Forms”** button (top-right of the table) that calls `/admin/forms/seed-from-live`.

4. **Safety**: If the backend can’t read live forms yet, the seed endpoint should fall back to a **static JSON** that is a 1:1 copy of what you already approved (so we don’t block).

---

# Copy-paste prompt for Replit

> Implement Admin → Forms list so it **shows the 3 real forms** (exact mirrors) instead of “Loading forms…”. Use the instructions below. Do not invent fields; if you cannot read the live schema, ping me.

### Back-end

* Add routes:

```ts
// GET list
GET /admin/forms
// POST seed by reading live operational schemas (or fallback to static JSON)
POST /admin/forms/seed-from-live
```

* Controller logic (pseudocode):

```ts
// models: form_definitions, form_versions

async function listForms(req, res) {
  const rows = await db.query(`
    SELECT fd.id, fd.name, fd.subgroup,
           fv.version_no AS "latestVersionNo",
           fv.version_date AS "latestVersionDate",
           fv.status
    FROM form_definitions fd
    JOIN LATERAL (
      SELECT version_no, version_date, status
      FROM form_versions
      WHERE form_id = fd.id
      ORDER BY version_no DESC
      LIMIT 1
    ) fv ON true
    ORDER BY fd.name;
  `);

  return res.json(rows); // [] is valid
}

async function seedFromLive(req, res) {
  // Try to read live schemas from the operational modules. If not available,
  // use FALLBACK_STATIC_JSON below (must be the exact approved layouts)
  const schemas = await readLiveSchemasOrFallback();

  // upsert form_definitions
  for (const s of schemas) {
    const formId = await upsertFormDefinition(s.name, s.subgroup);
    const hasAny = await hasAnyVersion(formId);
    if (!hasAny) {
      await insertVersion({
        formId,
        versionNo: 1,
        status: 'PUBLISHED',
        schemaJson: s.schemaJson,
        versionDate: now(),
        authorUserId: req.user.id
      });
    }
  }
  return res.json({ ok: true });
}
```

* Provide **FALLBACK\_STATIC\_JSON** (temporary) with the **exact** A–H component schema and the **exact** planned/unplanned WO schema you already approved. (Do not change labels, order, required flags, or control types.)

* Ensure the **operational renderer** (Components/WO) continues to read `GET /forms/runtime/:name` for the latest **PUBLISHED** version.

### Front-end (Admin → Forms tab)

* On mount:

  1. set `loading=true`
  2. fetch `GET /admin/forms`
  3. on success:

     * `loading=false`
     * if `rows.length===0`, show **Empty state**:

       * Title: “No forms found”
       * Body: “Seed from the live screens to create version 1 of each form.”
       * Button: **Rescan Live Forms**

         * calls `POST /admin/forms/seed-from-live`, then refetch list
  4. on error: `loading=false`, show **inline error** banner with a Retry button.

* Replace the infinite “Loading forms…” with:

  * a table skeleton for up to 1500ms, then swap to content or empty state.

* Table columns: **Form Name**, **Form Sub Group**, **Version No**, **Version Date**, **Actions** (✎ opens the configuration editor).

* Add a toolbar button **Rescan Live Forms** (top-right) that calls the seed endpoint and refreshes the list.

* UX requirements:

  * Never leave the page stuck in “Loading…” state.
  * If the API returns `[]`, **do not** show a loader; show the empty state.

### QA checks

* First run: open Admin → Forms:

  * If unseeded, you see the empty state + “Rescan Live Forms”.
  * Click it → list shows:

    * **Add Component Form** (v1, Published, date)
    * **Work Order Form (Planned)** (v1, Published, date)
    * **Work Order Form (Unplanned)** (v1, Published, date)
* Reload: rows persist.
* Network errors: show error banner; Retry works.
* Clicking ✎ opens the **configuration editor** for that form/version.

> If you cannot fetch the live form schema for any section, STOP and ask me. Do not fabricate fields or labels.

---

If you want, I can also give you the fallback static JSON package (A–H Component + both WO forms) to paste into the seed function so you’re not blocked while wiring the live schema reader.
