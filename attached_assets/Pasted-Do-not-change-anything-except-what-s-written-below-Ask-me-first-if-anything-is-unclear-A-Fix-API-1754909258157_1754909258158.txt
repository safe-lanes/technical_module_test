Do not change anything except what’s written below. Ask me first if anything is unclear.
A) Fix API calls for Receive / Consume (single-row modals)

Current bug: red toast shows
Failed to execute 'fetch' on 'Window': '/api/spares/1/receive' is not a valid HTTP method.
Likely a GET with body or an unsupported verb.

Required behavior

    Frontend:

        Receive: POST /api/spares/:componentSpareId/receive

        Consume: POST /api/spares/:componentSpareId/consume

        Content-Type: application/json

        Payload (both):

        {
          "vesselId": "<id>",
          "qty": <int>,                   // >0
          "dateLocal": "YYYY-MM-DD",      // required
          "tz": "<IANA TZ>",              // e.g., "Asia/Kolkata"
          "place": "<text>",              // optional for CONSUME, optional in single RECEIVE (see bulk below)
          "supplierPO": "<text>",         // RECEIVE only, optional
          "remarks": "<text>",            // optional
          "userId": "<currentUserId>"
        }

    Backend (controllers/services):

        Validate: qty >= 1, dateLocal not in future; for CONSUME ensure rob - qty >= 0 (else 400 “Insufficient stock”).

        Update component_spare.rob (+ or −).

        Write history row:

            eventType: RECEIVE or CONSUME

            Store: timestampUTC, dateLocal, tz, place, supplierPO (RECEIVE), qtyChange (+/-), robAfter, userId, componentSpareId, componentId, componentSpareCode, partCode.

        Return updated row (rob, stockStatus) for immediate UI refresh.

    Frontend after success: update the row inline, close modal, show green toast. On error: show backend message.

    Do not change any other fields, styles, or routes.

B) Bulk Update dialog — add Received Date & Received Place

UI changes (only in Bulk Update modal):

    Keep existing columns and layout.

    Add two new columns to the right of Received:

        Received Date (date input, placeholder YYYY-MM-DD)

        Received Place (text input, placeholder Port/Location)

    Validation rules:

        If Received > 0: both Received Date and Received Place are required.

        If Consumed > 0: keep current rules (no new fields required).

    Save behavior:

        For each row:

            If Consumed > 0: call POST /consume once with { qty, dateLocal (today if not provided globally), ... }.

            If Received > 0: call POST /receive once with { qty, dateLocal: receivedDate, place: receivedPlace, ... }.

        Rows with both fields empty: skip.

    Show per-row inline error if validation fails; do not block other valid rows.

    After all calls: show summary toast: Updated X rows, Y skipped, Z failed and refresh the visible table + History tab.

Backend: no change beyond §A; the same endpoints handle bulk calls per row.
C) History tab — show the new info

    Ensure new RECEIVE history entries display Date and Place columns.

    Sort newest first (unchanged).

    No style changes.

D) Acceptance checklist (must pass)

    Single Receive now saves without error; ROB increments; History entry appears immediately.

    Single Consume decrements ROB and blocks when it would go negative.

    Bulk Update: entering Received=2 requires Received Date and Received Place; save persists and updates rows; History shows entries with the place.

    Nothing else on the Spares screen (filters, Add Spare, Bulk Upload Spares, actions) changes visually or behaviorally.

If any existing route names differ, map to the existing ones but keep POST semantics and payloads identical.