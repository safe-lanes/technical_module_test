Below is a **complete, implementation-ready brief** for building the **Admin ‚Üí Bulk Data Import** screen and backend. Please follow it exactly. If any part is unclear or conflicts with existing code conventions, **stop and ask before changing it**.

---

## üîí Guardrails

* **Do not modify** existing Components / Spares / Stores modules or their APIs.
* Create a **new route** under Admin: `/admin/bulk-import`.
* Use the **existing UI kit** and layout system already used in Admin (same typography, buttons, cards).
* All uploads and imports are **scoped by vessel** if our app is multi-vessel. If vessel is required, reuse the standard vessel selector at top-right of Admin.

---

## 1) Frontend ‚Äì Screen & UX

### 1.1 Route & page

* Route: `/admin/bulk-import`
* Page title: **Bulk Data Import**
* Tabs (top):

  * **Bulk Data Imp** (active)
  * Alerts (placeholder, disabled)
  * Forms (placeholder, disabled)
  * Adm 4 (placeholder, disabled)

### 1.2 Layout

* **Left column** (fixed width): card titled **Templates** with a vertical list:

  1. **Machinery Components**
  2. **Spares**
  3. **Stores**

  * Selecting an item updates the right panel.

* **Right column**: detail card for the selected template with:

  * Header: `<ordinal>. <Template Name>`
  * Right-aligned button: **Download Template**
  * **Dropzone**:

    * ‚ÄúDrag and drop your completed template file here, or click to browse‚Äù
    * Accepts: `.xlsx`, `.xls`, `.csv` only
    * Secondary button: **Select File**
  * **Options row**:

    * **Import Mode** (dropdown): `Add New`, `Update Existing`, `Upsert (Add or Update)`, `Archive Missing` *(Archive Missing only visible when mode is Update or Upsert)*
    * **Date format hint**: ‚ÄúAccepted: DD-MMM-YYYY, DD-MM-YYYY, or ISO (YYYY-MM-DD)‚Äù
  * **Dry-Run Preview** (hidden until a file is uploaded):

    * Summary pills: `OK: N`, `Warnings: N`, `Errors: N`
    * Virtualized table (first 20 rows visible; pagination or windowing for large files)

      * Columns: `Row`, `Status`, **all template columns**, `Error(s)`
      * Row status badges: **OK** (green), **Warning** (amber), **Error** (red)
    * **Download error report** button (enabled if any Error/Warning)
    * **Import** button (primary) ‚Äî **disabled if any Error > 0**
  * **Update History** (bottom):

    * Table: `Date`, `User`, `Mode`, `Created`, `Updated`, `Skipped`, `Archived` (if applicable), `Actions`
    * Actions (icon buttons):

      * **Download File** (original upload)
      * **Download Error Report** (if failed)
      * **Download Result Map** (CSV mapping: file row ‚Üí record id & action)

### 1.3 State machine

* `idle` ‚Üí user selects template
* `uploading` ‚Üí user drops file (send to `/dry-run`)
* `preview` ‚Üí dry-run results shown, import disabled if `errors > 0`
* `importing` ‚Üí POST `/import` with token or same multipart
* `done` ‚Üí show toast with counts, append to history, clear preview

### 1.4 Frontend tech details

* Keep file in memory only until `/dry-run` succeeds; backend returns a **`fileToken`** so `/import` doesn‚Äôt need the file again.
* Use existing toast/notification system for success/error.
* Use our standardized confirm dialog if the user changes Import Mode after a preview exists (warn: ‚ÄúPreview will be reset. Continue?‚Äù).

---

## 2) Backend ‚Äì Endpoints & Contracts

> Namespace all endpoints under: **`/api/bulk`**

### 2.1 Download template

```
GET /api/bulk/template?type=components|spares|stores
Response: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
```

* Server **generates the template from live schema**, not a static file.
* First row: column headers.
* Second row: `Valid values / notes`.
* Third row: `Example`.
* Includes a hidden sheet `Meta` with:

  * `templateType`, `templateVersion`, `generatedAt`, `uomList`, `componentCategories`, `storesCategories`, `enumMaps`.

### 2.2 Dry-run validation

```
POST /api/bulk/dry-run
Form-data:
  file: (xlsx|xls|csv)
  type: components|spares|stores
  mode: add|update|upsert
  archiveMissing: true|false
  vesselId?: string
Response: 200
{
  "fileToken": "UUID",          // for import call
  "columns": ["..."],           // column order used in preview
  "summary": {"ok": n, "warnings": n, "errors": n},
  "rows": [
    {
      "row": 2,
      "status": "error|warning|ok",
      "errors": ["Row 2: Critical must be Yes/No"],
      "normalized": { "Component Code": "1.1.1", ... } // normalized values for preview
    },
    ...
  ],
  "errorReportUrl": "/api/bulk/history/tmp/<token>/errors.csv" // optional
}
```

### 2.3 Import (transactional)

```
POST /api/bulk/import
JSON:
  { "fileToken": "UUID", "type": "...", "mode": "add|update|upsert",
    "archiveMissing": false, "vesselId": "..." }
Response: 200
{
  "created": n,
  "updated": n,
  "skipped": n,
  "archived": n,
  "historyId": "UUID"
}
```

* **All-or-nothing** per file. On any write error, rollback and return 400 with a summarized error + `errorReportUrl`.

### 2.4 History

```
GET /api/bulk/history?type=components|spares|stores&limit=20&offset=0
Response: {
  "items": [
    {"id":"UUID","date":"ISO","user":"...","mode":"upsert","created":10,"updated":3,"skipped":0,"archived":0}
  ],
  "total": 2
}
```

```
GET /api/bulk/history/:id/file         // original upload
GET /api/bulk/history/:id/errors       // csv or xlsx of errors
GET /api/bulk/history/:id/result-map   // csv mapping row->record id, action
```

* Restrict all routes to **Admin** role.

---

## 3) Template Columns & Rules

### 3.1 Components (Sections A‚ÄìH)

**A. Component Information**

* `Component Code` *(required, unique across vessel)*
* `Component Name`
* `Component Category` *(must be one of the 8 categories used in Components module)*
* `Maker`, `Model`, `Serial No`, `Drawing No`, `Location`,
  `Critical (Yes/No)`, `Condition Based (Yes/No)`,
  `Installation Date`, `Commissioned Date`, `Rating`, `No of Units`,
  `Eqpt / System Department`, `Parent Component Code` *(optional, must exist in file or DB)*,
  `Dimensions/Size`, `Notes`

**B. Running Hours & Condition Monitoring**

* `Running Hours`, `Date Updated`
* Optional metrics up to 5:

  * `Metric1 Name`, `Metric1 Value`, `Metric1 Unit`
  * ‚Ä¶ Metric2‚ÄìMetric5

**C. Work Orders (initial definition, up to 10)**

* For k=1..10:
  `WO{k} Title`, `WO{k} Frequency Type (Calendar/Running Hours)`,
  `WO{k} Frequency Value`, `WO{k} Initial Next Due (Date)`, `WO{k} Assigned To (Rank)`

**D. Maintenance History (optional, up to 5)**

* `MH{k} WO No`, `MH{k} Performed By`, `MH{k} Total Time (Hrs)`, `MH{k} Completion Date`, `MH{k} Status`

**E. Spares (links) (optional, up to 10)**

* `SP{k} Part Code`, `SP{k} Part Name`, `SP{k} Min`, `SP{k} Critical (Yes/No)`, `SP{k} Location`

**F. Drawings & Manuals (optional, up to 10)**

* `Doc{k} Type (General Arrangement|Maintenance Manual|Installation Guide|Trouble Shooting Guide)`, `Doc{k} FileNameOrURL`

**G. Classification & Regulatory**

* `Classification Provider`, `Certificate No`, `Last Data Survey`, `Next Data Survey`,
  `Survey Type`, `Class Requirements`, `Class Code`, `Information`

**H. Requisitions (optional, up to 5)**

* `REQ{k} No`, `REQ{k} Part`, `REQ{k} Qty`, `REQ{k} Date`, `REQ{k} Status`

**Validation (components)**

* Required: `Component Code`, `Component Category` (valid), **no duplicate codes** in the file.
* `Parent Component Code` must exist (in DB or same file; handle two-pass resolution).
* Booleans: `Critical`, `Condition Based` must be `Yes/No` (case-insensitive).
* Dates normalized to ISO; reject invalid.
* Numbers: `Running Hours`, `No of Units`, `Frequency Value` must be >= 0.

### 3.2 Spares

* `Part Code` *(required, unique)*
* `Part Name` *(required)*
* `Component Code` *(required; link to component)*
* `UOM` *(allowed list: pcs, set, ltr, kg, m, box, roll, pack, kit, other)*
* `Min`, `Critical (Yes/No)`, `ROB`, `Location`
* Optional: `Maker`, `Model`, `Remarks`

**Validation (spares)**

* `Part Code` unique per tenant/vessel.
* `Component Code` must exist.
* `UOM` must match allowed list (case-insensitive).
* `ROB`, `Min` >= 0; `Critical` Yes/No.

### 3.3 Stores (includes Lubes, Chemicals, Others)

* `Item Code` *(required, unique)*
* `Item Name` *(required)*
* `Type` *(Stores|Lubes|Chemicals|Others)*
* `Stores Category` *(matches app categories)*
* `UOM` *(same allowed list as spares + domain-specific additions if we already have them)*
* `ROB`, `Min`, `Location`
* Optional: `Application Area`, `Remarks`

**Validation (stores)**

* `Type`, `Stores Category`, `UOM` must be valid.
* Numbers non-negative.

---

## 4) Import Behavior

* **Mode: Add New** ‚Üí fail on duplicate keys.

* **Mode: Update Existing** ‚Üí only update records that already exist; rows for unknown keys are `skipped`.

* **Mode: Upsert** ‚Üí create if missing, else update.

* **Archive Missing** (when true) ‚Üí any existing records for the same `type` (and vessel scope) **not present in the file** are **soft-archived**. Produce `archived` count.

* **Transactions**:

  * Wrap each import in a DB transaction.
  * On any error, rollback and respond 400 with an error report URL.

* **History**:

  * Store: `id`, `type`, `mode`, `archiveMissing`, `userId`, `vesselId`, `created`, `updated`, `skipped`, `archived`, `startedAt`, `finishedAt`, `filePath`, `errorReportPath`, `resultMapPath`, `status` (success|failed).
  * Keep original file and generated reports for download.

* **Idempotency**:

  * Compute a hash of the uploaded file; if the same user tries to import with same mode and hash within 24h, skip duplicate unless they confirm ‚ÄúRe-import‚Äù.

---

## 5) Error Messaging Examples

* ‚ÄúRow 7: **Component Category** ‚ÄòMain Engines‚Äô is invalid. Allowed: Ship General, Hull, Equipment for Cargo, ‚Ä¶‚Äù
* ‚ÄúRow 12: **Critical** must be ‚ÄòYes‚Äô or ‚ÄòNo‚Äô.‚Äù
* ‚ÄúRow 23: **Parent Component Code** ‚Äò1.9.9‚Äô not found (neither in file nor in database).‚Äù
* ‚ÄúRow 3: Duplicate **Component Code** ‚Äò1.1.1‚Äô within file.‚Äù

---

## 6) Security, Limits, Performance

* Admin-only middleware on `/api/bulk/*`.
* Max upload size: **20MB**. For larger files, respond 413 with a friendly message.
* For >5,000 rows, move the **actual import** to a background job (queue). The API can respond immediately with history id and status ‚Äúprocessing‚Äù. UI should poll history every 5s until `status !== processing`. (If background infra is not present, keep it synchronous for now and note the upgrade path.)

---

## 7) Implementation Notes

* Use a robust XLSX/CSV parser on the server (e.g., `xlsx` + `papaparse`) and **normalize values** (trim, casefold certain enums).
* Keep column order flexible; match by **header names** exactly. If a required column header is missing, return a top-level error immediately.
* The **template generator** should:

  * Pull the allowed **Component Categories**, **Stores Categories**, and **UOM list** from our current config tables.
  * Insert a **hidden `Meta` sheet** with the same lists so the template remains future-proof.

---

## 8) QA Checklist

* Download template for each type ‚Üí columns match spec.
* Upload a good file ‚Üí dry-run OK ‚Üí import ‚Üí history shows counts; records visible in their modules.
* Upload with errors ‚Üí preview shows red errors; Import disabled; error report downloadable.
* Try `Update Existing` with unknown keys ‚Üí skipped count increments.
* `Archive Missing` hides (soft-archives) records not in file; **does not delete**.
* Multi-vessel: when a vessel is selected, imports and archive calculations respect that scope.
* History downloads work for original file, error report, and result map.

---

### Deliverables

* Frontend page at `/admin/bulk-import` with UI/UX as above.
* Backend endpoints under `/api/bulk/*` with contracts above.
* Template generator that uses live schema/config.
* Validation and transactional import logic with full audit/history.
* Unit tests for parser & validator; integration tests for dry-run and import happy path + key error cases.

---

If any part of the spec conflicts with existing models (field names, category enumerations, or UOM lists), **pause and ask for the exact values** before proceeding.
