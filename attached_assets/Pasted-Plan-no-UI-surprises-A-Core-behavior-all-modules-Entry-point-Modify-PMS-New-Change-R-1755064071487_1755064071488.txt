Plan (no UI surprises)
A. Core behavior (all modules)

    Entry point (Modify PMS → New Change Request)

        Keep the small “New Change Request” modal only for: Title, Category, and the Select Target button.

        On Select Target, navigate (router push) to the real, existing page of the selection (no new synthetic screen):

            Components → Components/:componentId (the same A–H page)

            Work Orders → WorkOrders/:woId (Part A / Part B form)

            Spares → Spares list with the selected spare opened in the existing edit drawer/form

            Stores → Stores list with the selected store item opened in the existing edit drawer/form

        Pass a route query flag: ?editAsChangeRequest=1&crTitle=...&crCategory=....

    Edit-as-change-request mode (page-level)

        When editAsChangeRequest=1:

            Unlock fields (use the same controls the page already uses for editing).

            Do not alter layout, cards, spacing, or component composition.

            Add a subtle sticky banner at top:
            “You are proposing changes to this record. Edited fields will be tracked and submitted for approval. [Cancel] [Review & Submit]”.

            Every field the user touches gets diff-highlight:

                Original value shown as small muted text under the control.

                Current edited value styled normal; the field label gains a red “•” marker.

                Cards with at least one edited field add a red left border (2px) for quick scan.

            Disable any destructive actions (delete/archive) while in this mode.

    Review & Submit (same page)

        Button “Review & Submit” opens a right-side slide-over (not a separate page):

            Summary list grouped by section (A–H or Part A/B etc.) showing Old → New for each changed field.

            Required text area: “Reason for Change”.

            Optional file upload(s): evidence/manual extract.

            Buttons: Submit for Approval / Save Draft / Cancel (exit change mode & discard edits).

        On submit:

            Create a change_request with status Pending Approval.

            Persist only the diffs (not the whole record).

            Do not write edits to the live record yet.

            Route user back to Modify PMS list with a toast: “Change request submitted.”

    Approval workflow (office)

        Office opens the same real page via “Open Target” and the slide-over shows the diff with Approve / Reject + comment.

        Approve: apply diffs to the live record (one transaction), stamp audit, set CR Approved.

        Reject: do not change record, set CR Rejected, store comment.

    Audit

        Store who proposed, timestamps, and a JSON diff per field (with path keys).

        On apply, add an immutable audit row: who approved, when, which fields changed.

B. Module specifics
1) Components

    Route: /components/:id?editAsChangeRequest=1

    Use the existing A–H cards. Each card stays as-is.

    Make the entire A–H form editable in this mode (no new widgets).

    Show every edit with:

        red dot on the label,

        muted “was: …” under the control,

        left red border on the card.

    Work Orders & Spares sections within the component page remain read-only in this mode; to change them the user must start a separate request targeting that WO or Spare.

2) Work Orders

    Route: /work-orders/:woId?editAsChangeRequest=1

    Land on the existing Work Order Form (Part A / Part B).

    Editable fields include Job Type, Frequency (time/rh), Assigned To, Priority, Class Related, Required parts/tools, etc.

    Same diff-highlighting rules.

    Edge rules:

        If you change frequency, show a note in the summary: “Next due will be recalculated upon approval based on [new rule].”

        Keep the WO naming rules you and I defined earlier intact (no change here).

3) Spares

    Route: /spares?editAsChangeRequest=1&spareId=SP-XXXX

    Open the existing Edit Spare drawer (the same one used today).

    Fields: Part name, ROB Min, Location, UOM (we already added), Critical toggle, Component link (SP-link code) etc.

    Same diff-highlighting rules inside the drawer.

4) Stores (incl. Lubes/Chemicals/Others tabs)

    Route: /stores?tab=Stores&editAsChangeRequest=1&itemId=ST-XXXX

    Open the existing item edit drawer.

    Add UOM (as we planned with dropdown).

    Same diff-highlighting rules inside the drawer.

C. Data & API (minimal, safe)

Tables

    change_requests
    id, title, category, target_type (component|work_order|spare|store), target_id, status (draft|pending|approved|rejected), reason, created_by, created_at, updated_at, approved_by, approved_at, rejected_by, rejected_at, decision_comment

    change_request_diffs
    id, change_request_id, field_path (e.g. "component.sectionA.maker"), old_value (json), new_value (json)

Endpoints (REST)

    POST /api/change-requests → create draft/pending with diffs

    GET /api/change-requests?filters…

    GET /api/change-requests/:id

    POST /api/change-requests/:id/approve

    POST /api/change-requests/:id/reject

    No new endpoints for target screens—we reuse the existing fetch/edit components; the only addition is a page-level context provider that intercepts “save” in change-mode and writes to change_requests instead of the live record.

Client plumbing

    A small ChangeModeContext (isChangeMode, collectDiff(fieldPath, oldVal, newVal), getDiffs(), reset()).

    Field wrappers call collectDiff on first deviation from original snapshot.

    The Review & Submit drawer reads from getDiffs().

D. Guardrails (to prevent regressions)

    All change-mode UI elements are feature flagged by editAsChangeRequest=1. Without it, the app behaves exactly as today.

    No CSS or layout changes to existing pages; only:

        subtle banner,

        red dot on labels,

        small muted “was: …”,

        thin red card border,

        the review slide-over.

    Disable navigation away with unsaved change request (confirm dialog).

E. Acceptance checklist

    ✅ Selecting a target opens the real page/drawer for that record.

    ✅ Edits are highlighted; original values visible inline.

    ✅ “Review & Submit” shows a concise, grouped diff.

    ✅ Submitting creates a CR and does not alter live data.

    ✅ Office can approve/reject from the same real page with a side diff panel.

    ✅ Approval applies diffs atomically and writes audit.

    ✅ Works identically for Components, Work Orders, Spares, Stores.

Copy-paste prompt for Replit / Devs

    Goal: Implement “Edit in context” change requests without altering existing page layouts. No new synthetic forms. Use the existing Components A–H page, Work Order form, Spares edit drawer, and Stores edit drawer, but when a change request is initiated they open in a special edit-as-change-request mode that tracks diffs and submits them for approval.

    Routing

    Add a query flag editAsChangeRequest=1 (and optional crTitle, crCategory) respected by:

        /components/:id

        /work-orders/:woId

        /spares (open drawer for spareId)

        /stores (open drawer for itemId and tab)

    From Modify PMS → New Change Request, after the user selects a target, navigate to the corresponding route with this flag. Do not render a new custom screen.

    Edit-as-change-request mode

    Implement a ChangeModeContext with:

    interface Diff { path: string; oldVal: any; newVal: any; }
    setOriginalSnapshot(snapshot: any): void
    collectDiff(path: string, oldVal: any, newVal: any): void
    getDiffs(): Diff[]
    reset(): void

    When the page detects editAsChangeRequest=1:

        Capture an original snapshot of the target record.

        Enable the same edit controls already present on that page/drawer.

        Wrap inputs so their first deviation calls collectDiff.

        Add a sticky banner with “Cancel | Review & Submit”. Cancel exits change mode (route back).

        Visuals for changed fields:

            red “•” next to the field label,

            muted was: <old> text under the control,

            2px red border on any card containing at least one changed field.

    Review & Submit drawer

    Right side slide-over shows diffs grouped by section (use each page’s existing section metadata):

        Example row: Maker — was “MAN Energy Solutions” → new “Wärtsilä”

    Require “Reason for Change”.

    Optional evidence uploads (just store files under the CR).

    Buttons:

        Submit for Approval → POST /api/change-requests with:

            title (from crTitle if provided or page header),

            category (Components|WorkOrders|Spares|Stores),

            targetType, targetId,

            status: "pending",

            reason,

            diffs (array of {field_path, old_value, new_value} from context),

            attachments (ids).

        Save Draft → same POST with status: "draft".

        Cancel → route back and reset().

    Back end

    Add tables:

        change_requests (fields listed in the plan)

        change_request_diffs

    Add endpoints:

        POST /api/change-requests (create draft or pending with diffs)

        GET /api/change-requests?... (list for Modify PMS)

        GET /api/change-requests/:id (detail with diffs)

        POST /api/change-requests/:id/approve

            Transaction:

                fetch diffs,

                apply to the live record,

                write audit trail,

                set CR approved.

        POST /api/change-requests/:id/reject (set CR rejected with comment)

    Do not change existing endpoints for components/WOs/spares/stores; we only intercept save in change mode.

    Module specifics

    Components: Entire A–H cards remain as-is but editable in change mode. Do not allow editing of nested WO/Spares from here (separate CR is required).

    Work Orders: Open the existing WO form (Part A/B). Allow frequency changes etc.; show note in the review if frequency changed.

    Spares: Open the existing edit drawer for the selected spare (spareId). Respect our UOM and SP-link code fields.

    Stores: Open existing drawer for the selected item and tab. Respect the UOM dropdown.

    Guardrails

    All change-mode code must be gated by editAsChangeRequest=1. With the flag off, pages behave exactly as they do now.

    Prevent destructive actions in change mode.

    Confirm before navigating away with pending diffs.

    QA checklist

    Select target → lands on the real page/drawer in change mode.

    Edits highlight correctly; original values appear inline.

    Review drawer shows correct diffs and sections.

    Submit creates CR; live record unchanged.

    Approval applies diffs atomically; audit row written.

    Works for Components, WOs, Spares, Stores with no UI regressions.

Do not introduce new layouts, new pop-ups with synthetic fields, or any changes to spacing/typography/colors beyond the red markers and the banner/slide-over described above.