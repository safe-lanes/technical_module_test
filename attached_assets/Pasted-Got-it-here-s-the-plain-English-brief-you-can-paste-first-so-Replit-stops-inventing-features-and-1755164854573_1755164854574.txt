Got it — here’s the plain-English brief you can paste first so Replit stops “inventing” features and understands exactly what **Modify PMS** is supposed to do.

---

# What “Modify PMS” is (in plain English)

**Purpose:**
“Modify PMS” is a **change-request desk**, not a live editor. It lets a ship user *propose* changes to existing PMS data (Components, Work Orders, Spares, Stores). Office staff will **approve/reject** the proposal later. Until approval, **nothing in live data should change.**

**How it should feel to the user:**

1. The user picks a category (start with **Components**).
2. The user selects the **exact target** (e.g., “6.1.1 Cylinder Head”) from the same tree they already know.
3. The system then shows the **actual screen they’re used to** (Sections A–H of that component), but **editable** and **pre-filled** with the real current values.
4. Anything they change turns **red** so an approver can instantly see what changed.
5. The user can also **propose** to add/edit/remove **Work Orders** and **link/unlink Spares** — still intent only.
6. On **Submit**, we save a **change request** (a diff of what changed), not the live record.
7. On **Cancel**, nothing happens.

**What it must NOT do:**

* Do **not** update Components/Work Orders/Spares/Stores directly from this screen.
* Do **not** redesign the normal pages.
* Do **not** show made-up popup layouts. Always reuse the **real layout** for the target item, just make it editable.
* Do **not** leave fields blank — the form must be **pre-filled** with the current values so the user knows what they are changing.

---

# Phase 1 scope (only this for now)

**Category:** Components

**User flow (exact):**

1. Click “New Change Request” → choose **Components**.
2. Click **Select Target** → open the **normal Components tree** → user picks an item → click **Use This Target**.
3. Show the **real Component page** (Sections A–H) **in the same order and labels**, but **editable** and **pre-filled**.
4. As the user types/selects/toggles anything, mark that field **red** (and show a small “changes” badge on the section).
5. In **Section C – Work Orders**: allow inline **Add**, **Edit**, **Delete** rows (this is *intent only*, not a live delete).
6. In **Section E – Spares**: allow **link** a spare, **edit** Min/Critical/Location, **unlink** a spare (intent only).
7. Click **Submit** → create a **Change Request** object that contains:

   * Target (component id/code)
   * Title + Reason
   * A **diff** of everything that changed (old value vs new value).
   * Arrays for proposed **added/edited/removed** Work Orders and **linked/edited/unlinked** Spares.
8. Show the request in **Pending Approval**. Live data stays untouched.

**Acceptance points (must all be true):**

* The editable screen is **identical** to the normal Component info view (Sections A–H), but **pre-filled** and **editable**.
* Any change is **highlighted red**; if reverted, highlight disappears.
* Work Orders can be **added/edited/removed** as proposals; Spares can be **linked/edited/unlinked** as proposals.
* **Submit** stores a **change request** (a diff), **not** a live update.
* **Cancel** leaves everything unchanged.

**Out of scope right now:**

* Approval screen and actually merging the changes into live data.
* Other categories (Work Orders / Spares / Stores) — those will come later with the same pattern.

---

# Common mistakes to avoid (this is where we’ve gone wrong before)

* Showing a blank “select target” modal (it must load the **real component tree**).
* Opening a **brand-new** popup layout with invented fields — **don’t**. Use the **existing** Component layout.
* Rendering the editable form **without the current data** — **must** be pre-filled.
* Calling live APIs to update components/WO/spares — **no live writes** here.

---

If you want, I can now turn this into a short implementation checklist for the devs (data bindings, diff tracking, payload shape) — but this brief above is the “what & why” in simple terms so the build stays aligned.
