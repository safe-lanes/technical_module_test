Do not change anything except what is written below. Ask me first if anything is unclear.
Spares — Component Spare Code & Linking
0) Scope

    Keep UI, styling, existing buttons/flows (Add Spare, Bulk Update, History) exactly as-is.

    Only add the internal Component Spare Code and the data wiring described here.

1) Data model (additions only)

    Tables

        spare_master (existing): maker data per part (no change).

        component_spare (new or extend existing row that holds ROB/Min/Location per component):

            componentSpareId (pk)

            vesselId

            componentId (fk → component)

            spareMasterId (fk → spare_master)

            componentSpareCode (string, unique per vessel) ← NEW

            critical (bool), rob (int), min (int), location (string)

            audit fields as you already use (createdAt, createdBy, etc.)

    Uniqueness

        Unique index: (vesselId, componentSpareCode)

2) Code format & generation

    Format: SP-<ComponentCode>-<NNN>

        <ComponentCode> = dot path (e.g., 6.1.1.1)

        <NNN> = 3-digit sequence starting at 001, per component

    Generation rule (on create)
    NNN = max(existing NNN for this component) + 1, zero-padded to 3

    Immutability

        componentSpareCode is read-only to users

        Only system updates it when the component path changes (see §4)

Examples:

    Cylinder Head 6.1.1.1 → SP-6.1.1.1-001, SP-6.1.1.1-002

    Main Bearings 6.1.2 → SP-6.1.2-001

3) UI changes (minimal)

    Inventory tab (list):

        Add a column “Comp. Spare Code” right after Part Code. Value = componentSpareCode (read-only).

        Search must match on Part Code, Part Name, Component, Component Code, Comp. Spare Code, Location.

    Add/Edit Spare modal:

        Show Comp. Spare Code (read-only) beneath Part Code once component + spare are selected.

        No other layout changes.

4) Component move (re-parent) behavior

    When a component’s Component Code changes (due to move):

        For each linked component_spare:

            Recompute the prefix to the new <ComponentCode>.

            Try to retain the same NNN.

                If SP-<new>-<NNN> already exists for this vessel, allocate the next free NNN for that component.

            Write a history entry (see §6) with old → new code.

5) Bulk Upload / Imports

    If incoming row omits componentSpareCode:

        Auto-generate per rules above.

    If incoming row provides componentSpareCode:

        Validate it matches regex: ^SP-\d+(\.\d+)*-\d{3}$

        Validate <ComponentCode> inside the code equals the selected/linked component’s path.

        Validate uniqueness (vesselId, componentSpareCode).

        If any check fails → reject that row and report the reason; continue others.

6) History (reuse existing History tab)

    On create/edit/consume/receive/adjust (already done) → keep writing as now.

    Additional events to log:

        LINK_CREATED (component_spare created)

        CODE_RENUMBERED (oldCode → newCode on component move)

    History record must include: timestampUTC, vesselId, componentSpareId, componentId, componentCode, componentSpareCode, eventType, robAfter, qtyChange (if any), userId, remarks.

7) Integrity & validation

    rob must not go negative on consume; block with “Insufficient stock.”

    min ≥ 0.

    critical boolean as-is.

    All component lookups use current tree. Use prefix logic when filtering by tree node (node 6.1 includes 6.1.*).

    When deleting a component_spare, do not delete the spare_master.

8) Search/Filters (must continue to work)

    Combine filters with AND; search is case-insensitive partial match.

    Ensure search includes the new Comp. Spare Code.

    Keep pagination and counts unchanged.

9) Backfill (migration)

    For existing component_spare rows without a code:

        Derive <ComponentCode> from current linkage.

        Allocate NNN per component sequentially starting 001.

        Populate componentSpareCode.

        Log CODE_ASSIGNED in history.

10) Acceptance checks

    Add Spare to 6.1.1.1 Cylinder Head twice → codes SP-6.1.1.1-001, SP-6.1.1.1-002.

    Move Cylinder Head to 6.1.2 → codes update to SP-6.1.2-001/002 (keep NNNs unless collision).

    Search “SP-6.1.1.1-002” returns that row.

    Bulk upload without codes auto-generates; with mismatched codes is rejected with a clear error.

    History shows LINK_CREATED and CODE_RENUMBERED when applicable.

    No changes to Add Spare / Bulk Update behavior besides showing the code.

If any existing schema names/fields differ, keep the behavior the same and adapt bindings—do not change other modules or UI.