Here’s the exact developer brief you can paste into Replit so they stop shipping half-wired UI and make the **Modify PMS → Components** change form fully functional.

---

# Make the Modify PMS – Components editor FULLY WORKING

**Context (do not change):**
This screen is for **proposing** changes (a change request), not writing to live data. It must render the **real Component layout (Sections A–H)**, pre-filled, and be **fully editable**. Anything changed must be **highlighted in red**. On **Submit**, save a structured **diff** into a Change Request. Live data remains untouched.

## 0) Immediate UI fixes

* Remove the top-left label “**Component Register – Edit Component**” in this mode.
* All inputs currently shown in **#52BAF3** (editable style) are **disabled**. **Enable every single input** and bind to local state.
* Pre-fill **every field** from the selected component’s current data. No blanks.

## 1) Global behavior (applies to ALL fields and sections)

* **Pre-fill & enable:** Bind each input/select/date picker to local `formState` initialized from the current component record.
* **Change highlighting:** On any field change:

  * Compare `formState[key]` with `originalState[key]`.
  * If different → add class `changed` (style: text & border **red**). If reverted → remove `changed`.
  * Add a small section badge “• Changed” on that section header if any child field is changed.
* **Validation:** Keep current validations; show inline messages; prevent submit if required fields are empty.
* **Keyboard nav:** Tab order should be natural; Enter does not submit unless focused on explicit buttons.
* **Cancel:** Discard local state; return to the change request list.
* **Submit:** See section 6 for payload.

> If any existing component field is unclear, **pause and comment** exactly which field and we’ll specify the mapping. Do not guess.

## 2) Section A — Component Information

Make ALL fields editable & pre-filled:

* Maker, Model, Serial No, Drawing No, Component Code (read-only text), Component Category (select), Location, Critical (Yes/No), Condition Based (Yes/No), Installation Date, Commissioned Date, Rating, No of Units, Eqpt / System Department, Parent Component (select tree), Dimensions/Size, Notes.

**Notes:**

* `Component Code` is **read-only** here; still include it in the payload for reference.
* `Parent Component` opens the same tree selector; store selected parent in state, mark as changed if different.

## 3) Section B — Running Hours & Condition Monitoring

* **Running Hours** number field and **Date Updated** date picker: editable, red on change.
* **Condition Monitoring Metrics:**

  * Existing **Metric** rows: allow editing names and values.
  * “**+ Add Metric**” must insert a new row; “trash” icon removes a row locally.
  * Mark changes/added/removed rows accordingly in the diff.

## 4) Section C — Work Orders (critical)

Each WO row must support:

* **Edit:** inline for: Job Title, Assigned To, Frequency Type (drop-down: `Calendar` / `Running Hours`), Frequency Value (number), Initial Next Due (date). Eye icon stays non-functional in proposal mode (we only need the values).
* **Add WO:** opens the **existing Work Order form** in a **modal ‘proposal mode’** with the component pre-selected. On Save, push a new WO row to the table with `status = "PROPOSE_ADD"`.
* **Delete WO:** a small trash icon on each row marks `"PROPOSE_DELETE"` (strike-through style + red). A second click restores.
* All edited fields → `"PROPOSE_EDIT"` with before/after captured.

**Do NOT write to the live WO table from here.** Only record intent in the Change Request.

## 5) Section D — Maintenance History

* You can leave history read-only for now **except** the “+ Add M History” button, which should open a modal to **propose** a new entry (WO No, Performed By, Total Time (Hrs), Completion Date, Status). New entries are recorded in the payload under `maintenanceHistory.proposeAdd[]`.
* If hooking this up now is complex, wire the button but add a TODO comment; do not block the rest.

## 6) Section E — Spares

Make the spares table fully functional in proposal mode:

* Existing rows: editable fields for **Min**, **Critical (Yes/No)**, **Location**.
* **Link Spare** (“+ Add Spares”): opens the existing **Spares search** modal; on select, push a new row with `linkStatus = "PROPOSE_LINK"`.
* **Unlink** icon on a row toggles `linkStatus = "PROPOSE_UNLINK"`. Strike-through + red to visualize.
* Changes to Min/Critical/Location on existing link → `linkStatus = "PROPOSE_EDIT"`.

## 7) Sections F, G, H (Docs / Classification / Requisitions)

* All inputs visible in the screenshot (e.g., General Arrangement, Maintenance Manual, Class Provider, Certificate No, Next Data Survey, Requisition Part/Qty/Date/Status) must be editable and change-highlighted.
* “+ Add Document” / “+ Add Requisition” must insert new rows locally (proposal).

## 8) Submit – Change Request payload (diff only)

On **Submit**, validate then build this payload (example keys; keep names consistent with your codebase):

```json
{
  "target": {
    "type": "COMPONENT",
    "componentId": "<id>",
    "componentCode": "<code>"
  },
  "title": "<short title>",
  "reason": "<user text>",
  "diff": {
    "fields": {
      "maker": {"old": "Generic Manufacturer", "new": "ABC Co"},
      "model": {"old": "Model-1.1.1", "new": "WMABB5-4111 ADV"},
      "...": {}
    },
    "runningHours": {
      "value": {"old": 12580, "new": 20000},
      "dateUpdated": {"old": "2025-06-12", "new": "2025-08-10"}
    },
    "metrics": {
      "edited": [{"id":"temp","old":{"name":"Temperature","value":70},"new":{"name":"Temperature","value":75}}],
      "added": [{"tempId":"m1","name":"Vibration","value":3}],
      "removed": [{"id":"pressure"}]
    },
    "workOrders": {
      "add": [ { /* full WO details */ } ],
      "edit": [ { "woId":"WO-2025-03", "changes": { "frequencyType":{"old":"Calendar","new":"Running Hours"},"frequencyValue":{"old":30,"new":500},"initialNextDue":{"old":"2025-06-02","new":"2025-06-02"} } } ],
      "remove": [ {"woId":"WO-2024-013"} ]
    },
    "spares": {
      "link":   [ {"spareId":"SP-306-001"} ],
      "edit":   [ {"spareId":"SP-306-001", "changes":{"min":{"old":2,"new":5},"critical":{"old":"No","new":"Yes"},"location":{"old":"Store Room A","new":"Engine Room R-3"}}} ],
      "unlink": [ {"spareId":"SP-ME-002"} ]
    },
    "documents": {
      "add": [ {"type":"Installation Guide","name":"IG_v2.pdf"} ],
      "edit": [],
      "remove": []
    },
    "classification": { /* only fields that changed */ },
    "requisitions": {
      "add": [ {"reqNo":"REQ-2025-089","part":"Fuel Injection Pump","qty":2,"date":"2025-01-15","status":"Pending"} ],
      "edit": [],
      "remove": []
    }
  }
}
```

Persist as a **Change Request** with status **Pending Approval**. Do **not** write to the live Component/WO/Spares tables.

## 9) Visual cues & styles

* Field with changes: `border-color: #e64545; color: #e64545;`
* Section header badge: tiny red dot + “Changed”.
* Deleted/Unlinked rows: grey text, strike-through, red left border.

## 10) Buttons that MUST work

* “+ Add Metric” (B) → adds a metric row.
* “+ Add WO” (C) → opens real WO modal in proposal mode.
* Trash on WO row → toggles propose delete.
* “+ Add M History” (D) → opens proposal modal (see §5).
* “+ Add Spares” (E) → opens spares search/linker.
* Trash on Spare row → toggles propose unlink.
* “+ Add Document” (F) → adds a document row.
* “+ Add Requisition” (H) → adds a requisition row.
* **Submit** → builds payload above and saves CR.
* **Cancel** → exit without saving.

---

## Please confirm / ask before proceeding if ANY of these are unclear:

1. Names/IDs for frequency types and critical flags you expect.
2. The existing modals to reuse for **Work Order** and **Spares** selection in **proposal mode**.
3. Exact API/handler to persist **Change Request** (endpoint or action name).
4. Any fields we marked editable that should actually remain read-only in proposal mode.

**Do not implement alternatives. Pause and ask if something is missing or ambiguous.**
