Perfect — here’s the **single, copy-paste prompt** for Replit/devs. It implements **UOM dropdowns**, fixes **Stock** logic, and wires the **three row icons** using **Archive (not Delete)** — without changing anything else.

---

**Do not change anything except what is written below. Ask me first if anything is unclear.**

# STORES MODULE — UOM + STOCK LOGIC + ROW ICONS (EDIT / RECEIVE / ARCHIVE)

## 0) Scope

* Applies to all Stores tabs (Stores / Lubes / Chemicals / Others) and their Bulk Update dialogs.
* **No visual redesign**: keep existing tables, filters, buttons, spacing, and colors exactly as they are.

---

## 1) UOM: Dropdowns (with “Other”)

**Data**

* Keep single string field `uom` (≤ 20 chars). No schema refactor required.

**Allowed UOM values (exact labels):**

```
pcs, set, box, pkt,
kg, g,
ltr, ml,
m, cm,
roll, drum, can, bottle, jar, tube, pair, kit,
Other
```

**Add/Edit item modals**

* Replace free-text UOM input with:

  * Dropdown **UOM** using the list above.
  * If **Other** selected → show `UOM (custom)` text input (required, max 20 chars, trimmed). On save, store this custom value into `uom`.
  * If any predefined value selected → store that label into `uom`.
* Backward compatibility:

  * When opening an existing item: if `uom` matches a predefined value → preselect it; otherwise preselect **Other** and prefill custom field with the existing value.

**Tables & Export**

* In list tables, show the stored `uom` in the **UOM** column (position stays where you currently show UOM / or add immediately after Part Name if not present).
* Export CSV includes **UOM** (same column order as current export, just ensure UOM is present).

**Bulk Update**

* Show **UOM** as **read-only** in bulk dialogs (no editing UOM in bulk).

---

## 2) Stock badge logic (OK / Low / N/A)

* Compute **Stock** from `ROB` and `Min`:

  * If **Min is null/blank/0** → **N/A** (neutral grey).
  * Else if **ROB ≥ Min** → **OK** (green).
  * Else (**ROB < Min**) → **Low** (yellow).
* Recompute immediately after any Receive / Consume / Bulk save.
* Do **not** change any other badge styles or labels on the page.

---

## 3) Row action icons (next to Location) — Option A with Archive

### 3.1 Pencil icon — **Edit Item**

* Opens the existing **Edit Item** modal.
* Editable fields: **Name**, **Category** (if present), **UOM** (dropdown as above), **Min**, **Location**, **Notes** (keep current set — do not add new fields).
* Validation: Min ≥ 0.
* On Save:

  * Persist changes.
  * Write **history** entry: `EDIT` with before/after diffs (name, uom, min, location).
  * Refresh the row and **Stock** badge; toast success.

### 3.2 Plus icon — **Receive**

* Opens “Receive” modal (use existing one if present; otherwise create minimal):

  * **Quantity** (required, integer ≥1; respect decimals only if already supported for Lubes/Chemicals).
  * **Date (local)** (required; block future).
  * **Place** (text, optional — if Bulk requires it, keep optional here).
  * **Supplier/PO** (optional), **Remarks** (optional).
* On Save:

  * `ROB = ROB + qty`.
  * Write **history**: `RECEIVE` with `qtyChange = +qty`, `robAfter`, `dateLocal`, `place`, `supplierPO`, `userId`.
  * Refresh the row + **Stock** badge; toast success.

### 3.3 Bin icon — **Archive** (not hard delete)

* Change tooltip to **“Archive”** and icon to a greyed-out archive bin (no layout change required; color/tooltip enough).
* Click → confirm dialog:

  * If `ROB > 0`: show warning: “This item has stock on hand (ROB = X). Archive anyway?” with **Cancel** / **Archive**.
* On Archive:

  * Set `isArchived = true` (soft hide from active lists).
  * Write **history**: `ARCHIVE` with timestamp and userId.
  * Remove the row from current list; toast “Item archived.”
* Add a hidden **Archived** filter/tab **only if it already exists** in your UI. If not present, do not add UI; just ensure API can fetch archived by flag for Admin.
* **Hard delete** remains available only via Admin screen (no changes here).

---

## 4) Bulk Update — small enhancements (keep current layout)

* Keep all existing columns/behavior; add/keep:

  * **New ROB** (read-only preview column) immediately after **Received**:

    ```
    newROB = currentROB - (consumed || 0) + (received || 0)
    ```
  * If `newROB < 0` → highlight row and **block Save**; tooltip “Insufficient stock”.
  * If **Received > 0** and your design requires Date/Place in bulk:

    * Validate **Received Date** (required, not future) and **Received Place** (required) per row.
* On Save:

  * For each changed row:

    * If `consumed > 0`: decrement ROB, write `CONSUME` history (qty negative).
    * If `received > 0`: increment ROB, write `RECEIVE` history with date/place.
  * Update rows inline and recompute **Stock** badge.
  * Show summary toast: `Updated X, skipped Y, failed Z`.

*(If you already implemented bulk endpoints earlier, reuse them. No route name changes required; just ensure POST and payloads are correct.)*

---

## 5) History (no UI redesign)

* Ensure the new events above are recorded:

  * `EDIT` (details change), `RECEIVE`, `CONSUME`, `ARCHIVE`
* History schema (use existing fields + below if missing):
  `timestampUTC, vesselId, itemId/componentSpareId, partCode, name, uom, eventType, qtyChange (±), robAfter, dateLocal, place, supplierPO, userId, remarks`
* Default sort: newest first. History appears immediately after any action.

---

## 6) Acceptance checks (must pass)

1. **UOM** dropdown works; selecting **Other** reveals custom field; list + export show the chosen value.
2. **Stock** shows **OK/Low/N/A** based on ROB/Min rules, recalculating after Receive/Consume/Bulk.
3. **Edit** updates Name/UOM/Min/Location and writes an `EDIT` history row.
4. **Receive** increases ROB, writes `RECEIVE` history, updates badge inline.
5. **Archive** hides the row from active list, writes `ARCHIVE` history; Admin can still hard-delete elsewhere (unchanged).
6. **Bulk Update** shows **New ROB** preview, blocks negatives, saves valid rows, writes history; UI remains unchanged otherwise.
7. No regressions in filters, search, pagination, or existing modals.

---

If any existing field or route names differ, keep the behavior identical and adapt bindings accordingly — do **not** modify unrelated screens or styles.
