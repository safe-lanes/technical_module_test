Here’s a precise, implementation-ready prompt you can paste into Replit. It tells it exactly what to build, where it lives, how it behaves, and how we’ll accept it.

---

# Feature: Add custom fields & sections in **Add/Edit Components** form

## Context (do not change existing working features)

* We already have an **Add/Edit Component** modal with sections **A–H** and inline **edit/delete** for labels/fields.
* Blue `#52BAF3` indicates editable mode; red `#FF3B30` indicates a change in this session.
* Form versions are tracked in the **Admin → Forms** area.

## Goal

Allow authorized users to **add new fields** within any existing section (A–H) and optionally **add new sections** (I, J, …), with version control, without breaking existing data or labels.

---

## UI Changes

### 1) “+ Add field” per section

* In each section header row (e.g., “A. Component Information”), add a small right-aligned button:

  * Label: **+ Add field**
  * Style: secondary, compact
  * Visibility: **only** when user has form-configuration permission (same gate you use in Admin → Forms). Hidden for normal users.

* Click opens **Add Field** modal (see below).

* On save, the new field appears at the **end of that section**, immediately rendered with the editable blue color `#52BAF3`.

### 2) “+ Add new section” (bottom of form)

* Add a single button at the very bottom of the form:

  * Label: **+ Add new section**
  * Style: secondary, full-width on small screens, right-aligned on desktop
  * Visibility: same permission rule as “+ Add field”.

* Click opens **Add Section** modal (see below).

* New section is appended after H (i.e., becomes I, then J, etc.).

* Persist section title and its generated section ID.

* After creation, the section header and any new fields inside render in `#52BAF3`.

---

## Modals

### A) Add Field Modal

Fields to collect:

1. **Label** *(required, string)*
2. **Data type** *(required, enum)*: `text`, `textarea`, `number`, `date`, `boolean`, `select`
3. **Required** *(boolean)*
4. **Placeholder / Help text** *(optional, string)*
5. **Default value** *(type-aware)*
6. **Unit (UOM)** *(optional, string)*
7. \*\*Validation (type-aware)\*:

   * number: `min`, `max`
   * date: `minDate`, `maxDate`
   * text/textarea: optional `regex` pattern + `maxLength`
8. **Options** *(only when type = select)*: add/remove rows with `{value, label}`
9. **Field key (advanced)** *(auto-generated & editable only by admins)*

   * Default: slug from label + short random suffix, e.g., `cooling_pressure_ab12`
   * Must be **unique within the form** (enforce on save).

Buttons:

* **Save** (enabled only when label + type are valid & key unique)
* **Cancel** (closes without changes)

**On Save:**

* Append field to the target section’s `fields[]`.
* Render new field at end of section with `#52BAF3`.
* **Increment form version** and store version metadata (version no., date, author) so it shows under **Admin → Forms**.

### B) Add Section Modal

Fields to collect:

1. **Section title** *(required)* (e.g., “I. Vendor Extras”)
2. (Optional) **Add first field now** (a collapsed Add Field panel inside this modal that reuses the **Add Field Modal** inputs).

   * If user opts out, the section is created empty but will still show **+ Add field** in its header.

Buttons:

* **Create section** / **Cancel**

**On Create:**

* Generate a new section ID (e.g., `section-I`), persist `title`, create empty `fields[]` or the single initial field if provided.
* **Increment form version**.
* Render the section at the bottom in `#52BAF3`. It must include its own **+ Add field** button.

---

## Rendering/Behavior

* New fields/sections appear immediately (no full page reload), styled in `#52BAF3`.
* If a newly added field’s definition is edited again in this session (e.g., label changed), change its **label text** and the **field border** to the **red change color** `#FF3B30`.
* Existing “delete with Delete key” continues to work. For any admin delete:

  * Confirm dialog: “Remove field ‘{label}’? This creates a new form version and hides it from future entries; past data remains in previous versions.”
* **System core fields** (e.g., Component Name, Component Code) must remain **locked**: they cannot be deleted and their type cannot be changed. (Keep current lock behavior.)

---

## Permissions

* Show **+ Add field**, **+ Add new section**, and the **Field key** advanced input **only** to users with form-configuration permission (same rule used in Admin → Forms).
* Normal users can still **edit values** of existing fields but **cannot** add or remove fields/sections.

---

## Data Model (persisted)

Extend the component form schema (or your existing JSON schema) to include:

```ts
type FormVersion = {
  id: string;
  name: "Component Register";
  version: string;          // e.g., "03"
  versionDate: string;      // ISO date
  authorUserId: string;
  sections: Section[];
};

type Section = {
  id: string;               // e.g., "section-A", "section-I"
  title: string;            // e.g., "A. Component Information"
  fields: FieldDef[];
};

type FieldDef = {
  id: string;               // stable UUID
  key: string;              // unique within form (used to store values)
  label: string;
  type: "text" | "textarea" | "number" | "date" | "boolean" | "select";
  required: boolean;
  placeholder?: string;
  helpText?: string;
  defaultValue?: any;       // type-aware
  unit?: string;
  validation?: {
    min?: number;
    max?: number;
    minDate?: string;       // ISO
    maxDate?: string;
    regex?: string;
    maxLength?: number;
  };
  options?: { value: string; label: string }[]; // for select
  locked?: boolean;         // for core fields
  active: boolean;          // soft delete support
};
```

> Creating/removing a field or section **creates a new FormVersion**. Do not mutate the previous version in place.

---

## API / Storage

* If a full backend is wired:

  * `POST /api/forms/components/versions` → save new version (returns new version no.)
  * `GET /api/forms/components/versions/latest` → load current schema
* If not, temporarily persist in the same store used by **Admin → Forms** so the new version appears in its table.

---

## Acceptance Criteria

1. A small **+ Add field** button is visible in every section header **only for authorized users**.
2. Clicking **+ Add field** opens the **Add Field Modal** with the exact inputs above; validation prevents empty label, missing type, or duplicate keys.
3. Saving creates the field, appends it to the end of the section, shows it in `#52BAF3`, and **increments form version** (visible in Admin → Forms table).
4. A single **+ Add new section** button appears at the bottom **only for authorized users**.
5. Saving a new section appends it to the form (I, J, …) with its own **+ Add field** button and **increments form version**.
6. Editing a newly added field’s properties in the same session highlights **label + border** in `#FF3B30`.
7. Core/system fields remain locked (non-deletable, type immutable).
8. Inline delete (Delete key) still works for non-core fields with a confirmation dialog and creates a new form version (soft delete).
9. All changes are reflected under **Admin → Forms** (Form Name: Component Register) with updated **Version No** and **Version Date**.

---

## Notes

* Do **not** alter any behavior of normal data entry for regular users.
* Keep styles consistent with the current UI (editable = `#52BAF3`, changed = `#FF3B30`).
* If anything is unclear (e.g., where to store schema), ask before implementing.
