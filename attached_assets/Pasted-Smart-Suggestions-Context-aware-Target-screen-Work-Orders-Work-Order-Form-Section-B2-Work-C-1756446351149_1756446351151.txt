Smart Suggestions (Context-aware)

Target screen: Work Orders → Work Order Form → Section B2: Work Carried Out
Do not modify any other forms or fields.

1) Goal

Add a Smart Suggestions panel that proposes context-aware sentences for the “Work Carried Out” textarea. Suggestions should be based on the work order’s details (component, job title, maintenance type, frequency, etc.) and can be inserted (and then freely edited) by the user. This is assistive, not auto-filled.

2) UI Requirements

Place a “Smart Suggestions” toggle button (or pill) next to the existing Quick Input buttons, just above the textarea.

On click, open a small popover/panel listing up to 5 suggestions (multi-line preview, each max ~140 chars visible; full text on hover).

Clicking a suggestion inserts text at the cursor in the textarea (do not replace existing text). If multiple are clicked, append on new lines.

Keep the panel lightweight and non-intrusive. The user can always type/edit as usual.

If no suggestions are available, show: “No smart suggestions for this job yet.”

3) Context the system may use (already available on the form/page)

Pull from the same WO modal state (no new server calls unless already present):

A1 Work Order Information:

Job Title

Component (name + category if available)

Maintenance Type (e.g., Running Hours / Calendar / Condition-Based)

Frequency / RH Value (if present)

Job Category (if present)

B-section fields (if already filled in):

Performed By, Assigned To, Team size

Start/Completion Date & Time

WO record (if the modal already has it):

Recent history snippet or spares to be consumed list

If a field is missing, do not block — just use what’s available.

4) Suggestion Sources (ranked)

Implement a simple client-side generator that combines templated phrases + keywords. No external APIs.

4.1 Template Bank (JSON, embedded client-side initially)

Keyed by maintenanceType, componentCategory, and/or jobTitle keywords.

Supports token placeholders:

{{component}}, {{componentCategory}}, {{jobTitle}}

{{maintenanceType}}, {{frequency}}

{{performedBy}}, {{assignedTo}}, {{teamSize}}

{{startDateTime}}, {{completionDateTime}}

Example templates to seed:

Generic / Any

“{{jobTitle}} carried out on {{component}}; function tested and found satisfactory.”

“Routine maintenance performed as per PMS; equipment restored to normal.”

“Post-work trials completed; performance observed satisfactory.”

Running Hours

“Scheduled RH maintenance completed at {{frequency}} hrs; checks done as per instruction; no abnormalities noted.”

Calendar

“Calendar-based maintenance executed; visual/functional tests satisfactory.”

Safety / Alarms

“Alarm system tested as per checklist; all alarms functional; results satisfactory.”

Lubrication

“Lubrication/greasing carried out at specified points; parameters within normal limits.”

Electrical

“Electrical checks performed on {{component}}; insulation/continuity within acceptable range.”

Pumps/Rotating

“Operational checks done on {{component}}; vibration/temperature within limits; no leaks observed.”

4.2 Keyword Rules (fallback)

If there’s no exact template match, use keyword scoring from jobTitle + componentCategory (e.g., “alarm”, “lubrication”, “pump”, “valve”, “filter”, “generator”). Pick the best-matched generic templates.

4.3 Learn from usage (lightweight)

Save last 20 accepted suggestions locally (localStorage) per user and surface 1–2 frequently used ones that match current keywords. Label these “(Your frequent note)”.

5) Token resolution

Replace tokens with safe, human-readable strings.

If a token value is not present, omit the phrase gracefully (e.g., drop “at {{frequency}} hrs” if no frequency).

Date/time fields should use the same display format as the form.

6) Behavior & Performance

Suggestions are generated on panel open and whenever key context fields change (job title / component / maintenance type).

All logic is client-side; store the template JSON locally (we can later move it server-side).

Cache the compiled templates in memory to avoid lag.

No autosave/submit. This feature must not affect validation or the rest of the form.

7) Dev structure (suggestion engine)

Create a small utility module, e.g.: