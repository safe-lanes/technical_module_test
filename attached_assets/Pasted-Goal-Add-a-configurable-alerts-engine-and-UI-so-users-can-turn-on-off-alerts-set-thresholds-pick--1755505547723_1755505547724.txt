Goal: Add a configurable alerts engine and UI so users can turn on/off alerts, set thresholds, pick recipients, and see a history of alerts. Do not change other modules’ UX/flows. Reuse our current styling (buttons, tables, toggles) as seen in the existing Admin pages.

0) Scope for Phase 1 (MVP)

Implement these five alert types, with in-app and email channels:

Maintenance Due (Work Orders)

Running Hours Threshold (Components)

Critical Inventory (Spares/Stores)

Certificate Expiration (Class/Certificates in Section G of Components)

System Backup (nightly system job status)

Include: UI, persistence, scheduled evaluation, deduplication, history, test “Send” preview.
Exclude (for now): SMS/Slack/webhooks; complex per-field template editor (we will use simple handlebars).

1) UI – Admin → Alerts

Create a new tab under Admin called Alerts (we already have Bulk Data Import → keep that intact). The tab bar order should be: Bulk Data Imp | Alerts | Forms | <others remain>

1.1 Policies Table (main view)

Replicate the look of the screenshot we provided (toggles + priority):

Columns:

Alert Type (text, clickable opens drawer)

Description (static)

Email (toggle)

In-App (toggle)

Priority (select: Low/Medium/High)

Row items to include:

Maintenance Due — “Alerts for upcoming maintenance tasks”

Critical Inventory — “Alerts for low stock on critical items”

Running Hours Threshold — “Alerts when components reach RH thresholds”

Certificate Expiration — “Alerts for upcoming certificate expirations”

System Backup — “Alerts for backup status and failures”

Save Alert Configuration (primary button) persists all row-level toggles & priorities.

Do not navigate away or reload when saving; use optimistic UI with error toast on failure.

1.2 Policy Drawer (opens when clicking the Alert Type)

Right-side drawer (or modal) with:

Enabled (master toggle)

Priority (Low/Medium/High)

Channels: Email (toggle), In-App (toggle)

Thresholds (fields vary by type):

Maintenance Due: daysBeforeDue (int, default 7), includePendingApproval (bool, default false), onlyCritical (bool, default false)

Running Hours Threshold: hoursBeforeService (int, default 100), utilizationSpikePercent (int? optional)

Critical Inventory: bufferQty (int, default 0), includeNonCritical (bool, default false)

Certificate Expiration: daysBeforeExpiry (int, default 30), types (multiselect: Class Certs / Flag / Insurance / Survey etc.)

System Backup: requireDailySuccess (bool, default true), maxAgeHours (int, default 26)

Scope Filters:

Component Category (multiselect)

Assigned Ranks (for Maintenance Due)

Stores/Spares Location (for Critical Inventory)

Recipients:

Role/Ranks multiselect (Chief Eng, 2nd Eng, Tech Superintendent, Office)

Specific users multiselect (typeahead)

Optional distro lists (if available; otherwise hide)

Preview & Test

“Preview Message” (renders current template with placeholder variables)

“Send Test to me” (in-app + email to current user only)

Save / Cancel

1.3 Quiet Hours & Escalation (minimal MVP)

Add two small panels at the bottom of the Alerts page:

Quiet Hours: start time, end time (default off). During quiet hours, only High priority bypasses; other alerts are queued into daily digest.

Escalation: If High alerts are not acknowledged within X hours (default 4), escalate to Tech Superintendent + Office via email (checkbox + number input).

Store these in a single config row (see DB §3).

1.4 History (sub-tab inside Alerts)

Add a History sub-tab (table):

Columns: Time, Type, Object (link to WO/Component/Spare/Certificate), Priority, Recipients (N), Status (sent/failed/acknowledged), Ack By, Ack At, Actions: Resend, View Detail

Filters: date range, type, priority, status, vessel.

Click “View Detail” opens a drawer with the exact payload (event + deliveries, truncated message bodies ok).

2) Behavior
2.1 Evaluation Schedules

Implement a scheduler (use our existing cron/jobs infrastructure):

Daily 06:00 (vessel-local): Maintenance Due, Certificate Expiration

Hourly: Critical Inventory, RH Threshold

Nightly: System Backup (success/failure)

On-change triggers (if events already exist in our app): when WO created/updated, RH updated, stock updated → re-evaluate affected policies for that object immediately.

2.2 Deduplication & State Changes

For each alert, compute a dedupeKey = policyId|objectType|objectId|state.
We only create a new alert_event if:

No event with the same dedupeKey exists in the last 24h, or

The state changed (e.g., due → overdue; OK → Low; 15 days to expiry → 5 days to expiry)

2.3 Acknowledgement

In-app alert and email both contain an Acknowledge link/button.

Acknowledge updates alert_event.ack_by and alert_event.ack_at and stops escalation.

2.4 Quiet Hours & Digest

During Quiet Hours, Low/Medium alerts are not emailed immediately; they are batched into a Daily 08:00 digest email (per vessel).

High priority always sends immediately (unless Quiet Hours explicitly disabled in configuration).

2.5 Escalation

If High alert not acknowledged within configured hours (default 4), auto-send escalation email to Tech Superintendent + Office recipients (and log a new alert_delivery rows with channel=email, status=sent).

3) Database (new tables)

Create migrations. Use our naming & audit columns conventions.