Do not change anything except what’s written below. Ask me first if unclear.
Spares – Bulk Update: API fix + “New ROB” preview
A) Fix the API call (current error)

Bug shown: Failed to execute 'fetch': '/api/spares/bulk-update' is not a valid HTTP method.
Required:

    Frontend must call POST POST /api/spares/bulk-update with Content-Type: application/json.

    Payload shape:

{
  "vesselId": "<id>",
  "tz": "<IANA TZ>",
  "rows": [
    {
      "componentSpareId": "<id>",
      "consumed": 0,
      "received": 2,
      "receivedDate": "YYYY-MM-DD",     // required if received > 0, else omit
      "receivedPlace": "<text>",        // optional unless we already require it globally
      "dateLocal": "YYYY-MM-DD",        // optional default for consumed entries if used
      "remarks": "<text>",              // optional
      "userId": "<currentUserId>"
    }
  ]
}

    Backend controller for /bulk-update:

        Iterate rows in a single transaction; per row:

            Validate integers >= 0; when both are 0 → skip.

            If consumed > 0 ensure rob - consumed >= 0; else reject that row with error Insufficient stock.

            Update component_spare.rob = rob - consumed + received.

            Write history entries per action (CONSUME if >0, RECEIVE if >0) with qtyChange (+/-), robAfter, timestampUTC, dateLocal/tz, place, userId.

        Return per-row results: {componentSpareId, success: true|false, message?, robAfter}.

    Frontend on response:

        Update affected table rows inline with returned robAfter + recomputed Stock badge.

        Show summary toast: Updated X, skipped Y, failed Z.

    If the server already has different route names, use those, but keep POST and the payload contract.

B) Add New ROB column in the bulk dialog

    Insert a read-only column “New ROB” immediately after Received.

    Live calculation per row:

    newROB = currentROB - (consumed || 0) + (received || 0)

    Validation feedback:

        If newROB < 0 highlight the row and disable Save; tooltip: “Insufficient stock”.

        If received > 0 and required date/place fields are empty (if enforced), highlight those cells and block Save.

    When Save Changes is clicked:

        Only send rows where consumed > 0 or received > 0.

        Disable button during request; re-enable on completion.

C) Keep everything else unchanged

    Do not alter list columns, filters, Add Spare, single Receive/Consume modals, or History UI.

    Error handling: show per-row inline error in the bulk dialog if a row fails; do not block others.

D) Acceptance checks

    Enter values in Consumed/Received → New ROB updates immediately and blocks negatives.

    Click Save Changes → POST /bulk-update succeeds; list reflects new ROBs; History tab shows entries instantly.

    Rows with invalid input don’t submit and show precise inline error; valid rows still save.

    No other visual/behavior changes anywhere on the Spares screen.

If the backend cannot support a single /bulk-update endpoint quickly, fall back to batched per-row POSTs to the existing /consume and /receive endpoints, but keep the same frontend validation and New ROB preview.