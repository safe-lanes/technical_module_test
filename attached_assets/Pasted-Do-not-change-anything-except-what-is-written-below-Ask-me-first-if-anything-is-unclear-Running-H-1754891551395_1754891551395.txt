Do not change anything except what is written below. Ask me first if anything is unclear.
Running Hours — Scoped Changes
1) Add Δ vs Set Total (single + bulk dialogs)

    In both Single Update and Bulk Update dialogs, add a toggle at the top:

        Mode: Set Total | Add Delta (default = Set Total)

    Save logic:

        If Add Delta → newTotal = previousTotal + inputValue

        If Set Total → newTotal = inputValue

    Validation:

        If newTotal < previousTotal and “Meter replaced?” is unchecked → block save with:

            Message: “New hours must be ≥ previous hours. Use ‘Meter replaced?’ if the counter was reset.”

2) Back-dated entries

    Allow past dates; block future dates in Date Updated.

    On every save (single/bulk), write an RH audit row:

        { componentId, previousRH, newRH, dateUpdated (local), enteredAtUTC, userId, source: 'single'|'bulk', notes }

    Do not roll current totals backward when a back-dated entry is below the latest total; just record the audit row.

3) Meter replacement / rollover

    Add a checkbox “Meter replaced?” in both dialogs.

        When checked, show two required fields:

            Old Meter Final

            New Meter Start (default 0)

    Persist a meter-change audit including old/new meter values and reason (from comments).

    Compute and persist cumulative running hours so totals remain continuous across meter changes:

        cumulativeTotal = oldCumulativeBaseline + (enteredNewMeterValue - newMeterStart)

    Wherever the UI reads current running hours, use the cumulative value.

4) Replace “Tracking” with “Utilization Rate”
UI

    In the Running Hours table, remove the Tracking column.

    Add a column “Utilization Rate” in its place.

    Cell format: \<value\> hrs/day (one decimal). If not computable, show —.

    Tooltip (on hover): Computed from last 30 days of RH entries.

Computation (per component)

    Data source: RH audit entries with cumulative hours {componentId, cumulativeRH, dateUpdated}.

    Window: last 30 calendar days from “today” (inclusive).

    Fetch all entries in the window plus the most recent entry before the window start (anchor).

    If fewer than 2 points after anchoring → show —.

    Let start = earliest in window (or anchor), end = latest ≤ today.

    Compute:

    delta_hours = end.cumulativeRH - start.cumulativeRH
    delta_days  = max( (end.dateUpdated - start.dateUpdated).inDays, 1 )
    utilization = max( delta_hours / delta_days, 0 )

    Round to one decimal.

Triggers / Performance

    Recompute Utilization Rate for affected components:

        After any RH save (single or bulk).

        On screen load / pagination / filter changes if not cached.

    Cache per component for 15 minutes; bust cache on RH save.

Export

    In Export CSV, replace “Tracking” column with “Utilization Rate (hrs/day)” (same value or blank).

Constraints

    No other UI/UX changes (styles, colors, spacing, column order, filters, pagination remain exactly as-is).

    No schema refactor beyond adding audit rows and cumulative storage if missing.

    Do not touch Work Orders logic in this screen.