{"version":3,"file":"database.js","sourceRoot":"","sources":["database.ts"],"names":[],"mappings":"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","sourcesContent":["import { drizzle } from \"drizzle-orm/mysql2\";\nimport mysql from \"mysql2/promise\";\nimport { \n  users, \n  forms, \n  rankGroups, \n  availableRanks, \n  crewMembers, \n  appraisalResults,\n  type User,\n  type InsertUser,\n  type Form,\n  type InsertForm,\n  type RankGroup,\n  type InsertRankGroup,\n  type AvailableRank,\n  type InsertAvailableRank,\n  type CrewMember,\n  type InsertCrewMember,\n  type AppraisalResult,\n  type InsertAppraisalResult\n} from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\nimport { type IStorage } from \"./storage\";\n\nexport class DatabaseStorage implements IStorage {\n  private db: ReturnType<typeof drizzle>;\n  private pool: mysql.Pool;\n\n  constructor() {\n    if (!process.env.DATABASE_URL) {\n      throw new Error(\"DATABASE_URL environment variable is required\");\n    }\n    \n    this.pool = mysql.createPool({\n      uri: process.env.DATABASE_URL,\n      ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,\n      connectionLimit: 20,\n      acquireTimeout: 60000,\n      timeout: 60000,\n      reconnect: true,\n      idleTimeout: 300000,\n      queueLimit: 0\n    });\n    this.db = drizzle(this.pool);\n  }\n\n  async close() {\n    await this.pool.end();\n  }\n\n  async checkHealth(): Promise<boolean> {\n    try {\n      const connection = await this.pool.getConnection();\n      await connection.ping();\n      connection.release();\n      return true;\n    } catch (error) {\n      console.error(\"Database health check failed:\", error);\n      return false;\n    }\n  }\n\n  async reconnect(): Promise<void> {\n    try {\n      await this.pool.end();\n      this.pool = mysql.createPool({\n        uri: process.env.DATABASE_URL!,\n        ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,\n        connectionLimit: 20,\n        acquireTimeout: 60000,\n        timeout: 60000,\n        reconnect: true,\n        idleTimeout: 300000,\n        queueLimit: 0\n      });\n      this.db = drizzle(this.pool);\n    } catch (error) {\n      console.error(\"Database reconnection failed:\", error);\n      throw error;\n    }\n  }\n\n  // User methods\n  async getUser(id: number): Promise<User | undefined> {\n    const result = await this.db.select().from(users).where(eq(users.id, id));\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await this.db.select().from(users).where(eq(users.username, username));\n    return result[0];\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const result = await this.db.insert(users).values(insertUser).returning();\n    return result[0];\n  }\n\n  // Form methods\n  async getForms(): Promise<Form[]> {\n    return await this.db.select().from(forms);\n  }\n\n  async getForm(id: number): Promise<Form | undefined> {\n    const result = await this.db.select().from(forms).where(eq(forms.id, id));\n    return result[0];\n  }\n\n  async createForm(insertForm: InsertForm): Promise<Form> {\n    const result = await this.db.insert(forms).values(insertForm).returning();\n    return result[0];\n  }\n\n  async updateForm(id: number, formData: Partial<InsertForm>): Promise<Form | undefined> {\n    const result = await this.db.update(forms).set(formData).where(eq(forms.id, id)).returning();\n    return result[0];\n  }\n\n  async deleteForm(id: number): Promise<boolean> {\n    const result = await this.db.delete(forms).where(eq(forms.id, id));\n    return result.affectedRows > 0;\n  }\n\n  // Rank Group methods\n  async getRankGroups(formId: number): Promise<RankGroup[]> {\n    return await this.db.select().from(rankGroups).where(eq(rankGroups.formId, formId));\n  }\n\n  async createRankGroup(insertRankGroup: InsertRankGroup): Promise<RankGroup> {\n    const result = await this.db.insert(rankGroups).values(insertRankGroup).returning();\n    return result[0];\n  }\n\n  async updateRankGroup(id: number, rankGroupData: Partial<InsertRankGroup>): Promise<RankGroup | undefined> {\n    const result = await this.db.update(rankGroups).set(rankGroupData).where(eq(rankGroups.id, id)).returning();\n    return result[0];\n  }\n\n  async deleteRankGroup(id: number): Promise<boolean> {\n    const result = await this.db.delete(rankGroups).where(eq(rankGroups.id, id));\n    return result.affectedRows > 0;\n  }\n\n  // Available Rank methods\n  async getAvailableRanks(): Promise<AvailableRank[]> {\n    return await this.db.select().from(availableRanks);\n  }\n\n  async createAvailableRank(insertAvailableRank: InsertAvailableRank): Promise<AvailableRank> {\n    const result = await this.db.insert(availableRanks).values(insertAvailableRank).returning();\n    return result[0];\n  }\n\n  // Crew Member methods\n  async getCrewMembers(): Promise<CrewMember[]> {\n    return await this.db.select().from(crewMembers);\n  }\n\n  async getCrewMember(id: string): Promise<CrewMember | undefined> {\n    const result = await this.db.select().from(crewMembers).where(eq(crewMembers.id, id));\n    return result[0];\n  }\n\n  async createCrewMember(insertCrewMember: InsertCrewMember): Promise<CrewMember> {\n    const result = await this.db.insert(crewMembers).values(insertCrewMember).returning();\n    return result[0];\n  }\n\n  async updateCrewMember(id: string, crewMemberData: Partial<InsertCrewMember>): Promise<CrewMember | undefined> {\n    const result = await this.db.update(crewMembers).set(crewMemberData).where(eq(crewMembers.id, id)).returning();\n    return result[0];\n  }\n\n  async deleteCrewMember(id: string): Promise<boolean> {\n    const result = await this.db.delete(crewMembers).where(eq(crewMembers.id, id));\n    return result.affectedRows > 0;\n  }\n\n  // Appraisal Result methods\n  async getAppraisalResults(): Promise<AppraisalResult[]> {\n    return await this.db.select().from(appraisalResults);\n  }\n\n  async getAppraisalResult(id: number): Promise<AppraisalResult | undefined> {\n    const result = await this.db.select().from(appraisalResults).where(eq(appraisalResults.id, id));\n    return result[0];\n  }\n\n  async getAppraisalResultsByCrewMember(crewMemberId: string): Promise<AppraisalResult[]> {\n    return await this.db.select().from(appraisalResults).where(eq(appraisalResults.crewMemberId, crewMemberId));\n  }\n\n  async createAppraisalResult(insertAppraisalResult: InsertAppraisalResult): Promise<AppraisalResult> {\n    const result = await this.db.insert(appraisalResults).values(insertAppraisalResult).returning();\n    return result[0];\n  }\n\n  async updateAppraisalResult(id: number, appraisalResultData: Partial<InsertAppraisalResult>): Promise<AppraisalResult | undefined> {\n    const result = await this.db.update(appraisalResults).set(appraisalResultData).where(eq(appraisalResults.id, id)).returning();\n    return result[0];\n  }\n\n  async deleteAppraisalResult(id: number): Promise<boolean> {\n    const result = await this.db.delete(appraisalResults).where(eq(appraisalResults.id, id));\n    return result.affectedRows > 0;\n  }\n\n  // Seed data for initial setup\n  async seedDatabase(): Promise<void> {\n    try {\n      // Check if data already exists\n      const existingForms = await this.getForms();\n      if (existingForms.length > 0) {\n        console.log(\"Database already seeded, skipping...\");\n        return;\n      }\n\n      // Seed available ranks\n      const rankData: InsertAvailableRank[] = [\n        { name: \"Master\", category: \"Senior Officers\" },\n        { name: \"Chief Officer\", category: \"Senior Officers\" },\n        { name: \"Chief Engineer\", category: \"Senior Officers\" },\n        { name: \"2nd Officer\", category: \"Junior Officers\" },\n        { name: \"3rd Officer\", category: \"Junior Officers\" },\n        { name: \"2nd Engineer\", category: \"Junior Officers\" },\n        { name: \"3rd Engineer\", category: \"Junior Officers\" },\n        { name: \"Bosun\", category: \"Ratings\" },\n        { name: \"AB\", category: \"Ratings\" },\n        { name: \"OS\", category: \"Ratings\" },\n        { name: \"Oiler\", category: \"Ratings\" },\n        { name: \"Wiper\", category: \"Ratings\" },\n      ];\n\n      for (const rank of rankData) {\n        await this.createAvailableRank(rank);\n      }\n\n      // Seed forms\n      const form = await this.createForm({\n        name: \"Crew Appraisal Form\",\n        rankGroup: \"Senior Officers\",\n        versionNo: \"01\",\n        versionDate: \"01-Jan-2025\",\n        configuration: null,\n      });\n\n      // Seed rank groups\n      await this.createRankGroup({\n        formId: form.id,\n        name: \"Senior Officers\",\n        ranks: JSON.stringify([\"Master\", \"Chief Officer\", \"Chief Engineer\"]),\n      });\n\n      // Seed crew members\n      const crewMemberData: InsertCrewMember[] = [\n        {\n          id: \"2025-05-14\",\n          firstName: \"James\",\n          middleName: \"Michael\",\n          lastName: \"\",\n          rank: \"Master\",\n          nationality: \"British\",\n          vessel: \"MT Sail One\",\n          vesselType: \"Oil Tanker\",\n          signOnDate: \"01-Feb-2025\",\n        },\n        {\n          id: \"2025-03-12\",\n          firstName: \"Anna\",\n          middleName: \"Marie\",\n          lastName: \"Johnson\",\n          rank: \"Chief Engineer\",\n          nationality: \"British\",\n          vessel: \"MT Sail Ten\",\n          vesselType: \"LPG Tanker\",\n          signOnDate: \"01-Jan-2025\",\n        },\n        {\n          id: \"2025-02-12\",\n          firstName: \"David\",\n          middleName: \"Lee\",\n          lastName: \"Brown\",\n          rank: \"Able Seaman\",\n          nationality: \"Indian\",\n          vessel: \"MT Sail Two\",\n          vesselType: \"Container\",\n          signOnDate: \"01-Feb-2025\",\n        },\n      ];\n\n      for (const crewMember of crewMemberData) {\n        await this.createCrewMember(crewMember);\n      }\n\n      // Seed appraisal results\n      const appraisalData: InsertAppraisalResult[] = [\n        {\n          crewMemberId: \"2025-05-14\",\n          formId: form.id,\n          appraisalType: \"End of Contract\",\n          appraisalDate: \"06-Jun-2025\",\n          appraisalData: \"{}\",\n          competenceRating: \"4.9\",\n          behavioralRating: \"4.5\",\n          overallRating: \"4.7\",\n          submittedBy: \"admin\",\n          status: \"submitted\",\n        },\n        {\n          crewMemberId: \"2025-03-12\",\n          formId: form.id,\n          appraisalType: \"Mid Term\",\n          appraisalDate: \"07-May-2025\",\n          appraisalData: \"{}\",\n          competenceRating: \"3.5\",\n          behavioralRating: \"4.5\",\n          overallRating: \"4.0\",\n          submittedBy: \"admin\",\n          status: \"submitted\",\n        },\n        {\n          crewMemberId: \"2025-02-12\",\n          formId: form.id,\n          appraisalType: \"Special\",\n          appraisalDate: \"06-Jun-2025\",\n          appraisalData: \"{}\",\n          competenceRating: \"2.5\",\n          behavioralRating: \"3.5\",\n          overallRating: \"3.0\",\n          submittedBy: \"admin\",\n          status: \"submitted\",\n        },\n      ];\n\n      for (const appraisal of appraisalData) {\n        await this.createAppraisalResult(appraisal);\n      }\n\n      console.log(\"Database seeded successfully!\");\n    } catch (error) {\n      console.error(\"Error seeding database:\", error);\n      throw error;\n    }\n  }\n}"]}