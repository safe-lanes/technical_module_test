{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â€¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n"]}