{"version":3,"file":"forms.js","sourceRoot":"","sources":["forms.ts"],"names":[],"mappings":"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","sourcesContent":["import { Router } from 'express';\nimport { storage } from '../storage';\nimport { z } from 'zod';\nimport { insertFormVersionSchema } from '@shared/schema';\n\nconst router = Router();\n\n// Seed forms from live schemas\nrouter.post('/admin/forms/seed-from-live', async (req, res) => {\n  try {\n    // Seed if not already present\n    if (storage.seedForms) {\n      await storage.seedForms();\n    }\n    res.json({ ok: true, message: 'Forms seeded successfully' });\n  } catch (error) {\n    console.error('Error seeding forms:', error);\n    res.status(500).json({ error: 'Failed to seed forms' });\n  }\n});\n\n// List all form definitions with latest version info\nrouter.get('/admin/forms', async (req, res) => {\n  try {\n    let forms = await storage.getFormDefinitions();\n\n    // Auto-seed if no forms exist\n    if (forms.length === 0) {\n      await storage.seedForms();\n      forms = await storage.getFormDefinitions();\n    }\n\n    // Get latest version for each form\n    const formsWithVersions = await Promise.all(\n      forms.map(async form => {\n        const latestVersion = await storage.getLatestPublishedVersion(form.id);\n        return {\n          ...form,\n          versionNo: latestVersion?.versionNo || 0,\n          versionDate: latestVersion?.versionDate || null,\n          status: latestVersion?.status || 'NO_VERSION',\n        };\n      })\n    );\n\n    res.json(formsWithVersions);\n  } catch (error) {\n    console.error('Error fetching forms:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Get all versions for a form\nrouter.get('/admin/forms/:formId/versions', async (req, res) => {\n  try {\n    const formId = parseInt(req.params.formId);\n    const versions = await storage.getFormVersions(formId);\n    res.json(versions);\n  } catch (error) {\n    console.error('Error fetching form versions:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Get specific version\nrouter.get('/admin/forms/:formId/versions/:versionId', async (req, res) => {\n  try {\n    const versionId = parseInt(req.params.versionId);\n    const version = await storage.getFormVersion(versionId);\n\n    if (!version) {\n      return res.status(404).json({ error: 'Version not found' });\n    }\n\n    res.json(version);\n  } catch (error) {\n    console.error('Error fetching form version:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Create new draft version (clone from latest published)\nrouter.post('/admin/forms/:formId/versions', async (req, res) => {\n  try {\n    const formId = parseInt(req.params.formId);\n\n    // Get latest published version to clone\n    const latestPublished = await storage.getLatestPublishedVersion(formId);\n\n    if (!latestPublished) {\n      return res\n        .status(404)\n        .json({ error: 'No published version found to clone' });\n    }\n\n    // Check if draft already exists\n    const existingVersions = await storage.getFormVersions(formId);\n    const existingDraft = existingVersions.find(v => v.status === 'DRAFT');\n\n    if (existingDraft) {\n      return res.status(400).json({ error: 'Draft version already exists' });\n    }\n\n    // Create new draft\n    const newVersion = await storage.createFormVersion({\n      formId,\n      versionNo: latestPublished.versionNo + 1,\n      versionDate: new Date(),\n      status: 'DRAFT',\n      authorUserId: req.body.userId || 'user',\n      changelog: null,\n      schemaJson: latestPublished.schemaJson,\n    });\n\n    res.json(newVersion);\n  } catch (error) {\n    console.error('Error creating draft version:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Update draft schema\nrouter.put(\n  '/admin/forms/:formId/versions/:versionId/schema',\n  async (req, res) => {\n    try {\n      const versionId = parseInt(req.params.versionId);\n      const { schemaJson } = req.body;\n\n      if (!schemaJson) {\n        return res.status(400).json({ error: 'Schema JSON is required' });\n      }\n\n      const updated = await storage.updateFormVersion(versionId, {\n        schemaJson:\n          typeof schemaJson === 'string'\n            ? schemaJson\n            : JSON.stringify(schemaJson),\n      });\n\n      res.json(updated);\n    } catch (error: any) {\n      console.error('Error updating form schema:', error);\n      if (error.message === 'Can only update draft versions') {\n        return res.status(400).json({ error: error.message });\n      }\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  }\n);\n\n// Publish version\nrouter.post(\n  '/admin/forms/:formId/versions/:versionId/publish',\n  async (req, res) => {\n    try {\n      const versionId = parseInt(req.params.versionId);\n      const { userId, changelog } = req.body;\n\n      if (!changelog) {\n        return res.status(400).json({ error: 'Changelog is required' });\n      }\n\n      const published = await storage.publishFormVersion(\n        versionId,\n        userId || 'user',\n        changelog\n      );\n\n      res.json(published);\n    } catch (error: any) {\n      console.error('Error publishing form version:', error);\n      if (error.message.includes('Can only publish')) {\n        return res.status(400).json({ error: error.message });\n      }\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  }\n);\n\n// Discard draft\nrouter.post(\n  '/admin/forms/:formId/versions/:versionId/discard',\n  async (req, res) => {\n    try {\n      const versionId = parseInt(req.params.versionId);\n      await storage.discardFormVersion(versionId);\n      res.json({ success: true });\n    } catch (error: any) {\n      console.error('Error discarding form version:', error);\n      if (error.message.includes('Can only discard')) {\n        return res.status(400).json({ error: error.message });\n      }\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  }\n);\n\n// Rollback to previous version (create new draft from old version)\nrouter.post(\n  '/admin/forms/:formId/versions/:versionId/rollback',\n  async (req, res) => {\n    try {\n      const formId = parseInt(req.params.formId);\n      const versionId = parseInt(req.params.versionId);\n\n      // Get the version to rollback to\n      const sourceVersion = await storage.getFormVersion(versionId);\n\n      if (!sourceVersion) {\n        return res.status(404).json({ error: 'Version not found' });\n      }\n\n      // Check if draft already exists\n      const existingVersions = await storage.getFormVersions(formId);\n      const existingDraft = existingVersions.find(v => v.status === 'DRAFT');\n\n      if (existingDraft) {\n        return res.status(400).json({ error: 'Draft version already exists' });\n      }\n\n      // Get latest version number\n      const latestVersion = existingVersions[0];\n      const newVersionNo = latestVersion ? latestVersion.versionNo + 1 : 1;\n\n      // Create new draft from source version\n      const newDraft = await storage.createFormVersion({\n        formId,\n        versionNo: newVersionNo,\n        versionDate: new Date(),\n        status: 'DRAFT',\n        authorUserId: req.body.userId || 'user',\n        changelog: `Rollback from version ${sourceVersion.versionNo}`,\n        schemaJson: sourceVersion.schemaJson,\n      });\n\n      res.json(newDraft);\n    } catch (error) {\n      console.error('Error rolling back form version:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  }\n);\n\n// Runtime endpoint - get latest published schema for operational use\nrouter.get('/forms/runtime/:name', async (req, res) => {\n  try {\n    const { name } = req.params;\n    const version = await storage.getLatestPublishedVersionByName(name);\n\n    if (!version) {\n      return res.status(404).json({ error: 'No published version found' });\n    }\n\n    // Track usage\n    await storage.createFormVersionUsage({\n      formVersionId: version.id,\n      usedInModule: (req.headers['x-module'] as string) || 'unknown',\n      usedAt: new Date(),\n    });\n\n    res.json({\n      versionId: version.id,\n      versionNo: version.versionNo,\n      schema: JSON.parse(version.schemaJson),\n    });\n  } catch (error) {\n    console.error('Error fetching runtime form:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\nexport default router;\n"]}