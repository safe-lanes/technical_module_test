{"version":3,"file":"alerts.js","sourceRoot":"","sources":["alerts.ts"],"names":[],"mappings":"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","sourcesContent":["import { Router } from 'express';\nimport { storage } from '../storage';\nimport { z } from 'zod';\nimport {\n  insertAlertPolicySchema,\n  insertAlertConfigSchema,\n} from '@shared/schema';\n\nconst router = Router();\n\n// Get all alert policies\nrouter.get('/policies', async (req, res) => {\n  try {\n    const policies = await storage.getAlertPolicies();\n    res.json(policies);\n  } catch (error) {\n    console.error('Error fetching alert policies:', error);\n    res.status(500).json({ error: 'Failed to fetch alert policies' });\n  }\n});\n\n// Get single alert policy\nrouter.get('/policies/:id', async (req, res) => {\n  try {\n    const id = parseInt(req.params.id);\n    const policy = await storage.getAlertPolicy(id);\n    if (!policy) {\n      return res.status(404).json({ error: 'Alert policy not found' });\n    }\n    res.json(policy);\n  } catch (error) {\n    console.error('Error fetching alert policy:', error);\n    res.status(500).json({ error: 'Failed to fetch alert policy' });\n  }\n});\n\n// Update alert policy\nrouter.patch('/policies/:id', async (req, res) => {\n  try {\n    const id = parseInt(req.params.id);\n    const policy = await storage.updateAlertPolicy(id, req.body);\n    res.json(policy);\n  } catch (error) {\n    console.error('Error updating alert policy:', error);\n    res.status(500).json({ error: 'Failed to update alert policy' });\n  }\n});\n\n// Batch update alert policies\nrouter.post('/policies/batch-update', async (req, res) => {\n  try {\n    const updates = req.body.policies;\n    const results = [];\n\n    for (const update of updates) {\n      const policy = await storage.updateAlertPolicy(update.id, update);\n      results.push(policy);\n    }\n\n    res.json({ success: true, policies: results });\n  } catch (error) {\n    console.error('Error batch updating alert policies:', error);\n    res.status(500).json({ error: 'Failed to batch update alert policies' });\n  }\n});\n\n// Get alert events (history)\nrouter.get('/events', async (req, res) => {\n  try {\n    const filters = {\n      startDate: req.query.startDate\n        ? new Date(req.query.startDate as string)\n        : undefined,\n      endDate: req.query.endDate\n        ? new Date(req.query.endDate as string)\n        : undefined,\n      alertType: req.query.alertType as string | undefined,\n      priority: req.query.priority as string | undefined,\n      status: req.query.status as string | undefined,\n      vesselId: req.query.vesselId as string | undefined,\n    };\n\n    const events = await storage.getAlertEvents(filters);\n    res.json(events);\n  } catch (error) {\n    console.error('Error fetching alert events:', error);\n    res.status(500).json({ error: 'Failed to fetch alert events' });\n  }\n});\n\n// Get alert event details\nrouter.get('/events/:id', async (req, res) => {\n  try {\n    const id = parseInt(req.params.id);\n    const event = await storage.getAlertEvent(id);\n    if (!event) {\n      return res.status(404).json({ error: 'Alert event not found' });\n    }\n\n    // Also get deliveries for this event\n    const deliveries = await storage.getAlertDeliveries(id);\n\n    res.json({ ...event, deliveries });\n  } catch (error) {\n    console.error('Error fetching alert event:', error);\n    res.status(500).json({ error: 'Failed to fetch alert event' });\n  }\n});\n\n// Acknowledge alert event\nrouter.post('/events/:id/acknowledge', async (req, res) => {\n  try {\n    const id = parseInt(req.params.id);\n    const userId = req.body.userId || 'user1'; // In production, get from session\n    const event = await storage.acknowledgeAlertEvent(id, userId);\n    res.json(event);\n  } catch (error) {\n    console.error('Error acknowledging alert event:', error);\n    res.status(500).json({ error: 'Failed to acknowledge alert event' });\n  }\n});\n\n// Send test alert\nrouter.post('/test', async (req, res) => {\n  try {\n    const { policyId, userId } = req.body;\n\n    // Get the policy\n    const policy = await storage.getAlertPolicy(policyId);\n    if (!policy) {\n      return res.status(404).json({ error: 'Alert policy not found' });\n    }\n\n    // Create a test event\n    const event = await storage.createAlertEvent({\n      policyId,\n      alertType: policy.alertType,\n      priority: policy.priority,\n      objectType: 'test',\n      objectId: `test-${Date.now()}`,\n      vesselId: 'V001',\n      dedupeKey: `test-${policyId}-${Date.now()}`,\n      state: 'test',\n      payload: JSON.stringify({\n        test: true,\n        message: `This is a test alert for ${policy.alertType}`,\n        timestamp: new Date().toISOString(),\n      }),\n    });\n\n    // Create test deliveries\n    if (policy.inAppEnabled) {\n      await storage.createAlertDelivery({\n        eventId: event.id,\n        channel: 'in_app',\n        recipient: userId || 'user1',\n        status: 'sent',\n      });\n    }\n\n    if (policy.emailEnabled) {\n      await storage.createAlertDelivery({\n        eventId: event.id,\n        channel: 'email',\n        recipient: userId || 'user1@example.com',\n        status: 'sent',\n      });\n    }\n\n    res.json({ success: true, event });\n  } catch (error) {\n    console.error('Error sending test alert:', error);\n    res.status(500).json({ error: 'Failed to send test alert' });\n  }\n});\n\n// Get alert configuration\nrouter.get('/config/:vesselId', async (req, res) => {\n  try {\n    const config = await storage.getAlertConfig(req.params.vesselId);\n    res.json(\n      config || {\n        vesselId: req.params.vesselId,\n        quietHoursEnabled: false,\n        quietHoursStart: null,\n        quietHoursEnd: null,\n        escalationEnabled: false,\n        escalationHours: 4,\n        escalationRecipients: '[]',\n      }\n    );\n  } catch (error) {\n    console.error('Error fetching alert config:', error);\n    res.status(500).json({ error: 'Failed to fetch alert config' });\n  }\n});\n\n// Update alert configuration\nrouter.post('/config', async (req, res) => {\n  try {\n    const config = await storage.createOrUpdateAlertConfig({\n      ...req.body,\n      updatedBy: req.body.userId || 'user1',\n    });\n    res.json(config);\n  } catch (error) {\n    console.error('Error updating alert config:', error);\n    res.status(500).json({ error: 'Failed to update alert config' });\n  }\n});\n\nexport default router;\n"]}