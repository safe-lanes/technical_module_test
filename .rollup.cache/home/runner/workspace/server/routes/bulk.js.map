{"version":3,"file":"bulk.js","sourceRoot":"","sources":["bulk.ts"],"names":[],"mappings":"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","sourcesContent":["import { Router } from 'express';\nimport multer from 'multer';\nimport * as XLSX from 'xlsx';\nimport Papa from 'papaparse';\nimport { v4 as uuidv4 } from 'uuid';\nimport path from 'path';\nimport fs from 'fs';\nimport { storage } from '../storage';\n\nconst router = Router();\nconst upload = multer({ \n  storage: multer.memoryStorage(),\n  limits: { fileSize: 20 * 1024 * 1024 } // 20MB limit\n});\n\n// Store dry-run results temporarily (in production, use Redis or similar)\nconst dryRunCache = new Map<string, any>();\n\n// Component categories from existing system\nconst COMPONENT_CATEGORIES = [\n  \"Ship's Structure\",\n  \"Deck Machinery\", \n  \"Engine Department\",\n  \"Safety Equipment\",\n  \"Accommodation\",\n  \"Hull\",\n  \"Equipment for Cargo\",\n  \"Ship General\"\n];\n\n// UOM list\nconst UOM_LIST = ['pcs', 'set', 'ltr', 'kg', 'm', 'box', 'roll', 'pack', 'kit', 'other'];\n\n// Stores categories\nconst STORES_CATEGORIES = [\n  'General Stores',\n  'Electrical',\n  'Mechanical',\n  'Safety',\n  'Consumables'\n];\n\n// Generate template based on type\nrouter.get('/template', (req, res) => {\n  const { type } = req.query;\n  \n  if (!['components', 'spares', 'stores'].includes(type as string)) {\n    return res.status(400).json({ error: 'Invalid template type' });\n  }\n\n  const workbook = XLSX.utils.book_new();\n  let headers: string[] = [];\n  let validValues: string[] = [];\n  let example: any[] = [];\n\n  switch (type) {\n    case 'components':\n      headers = [\n        // Section A\n        'Component Code', 'Component Name', 'Component Category',\n        'Maker', 'Model', 'Serial No', 'Drawing No', 'Location',\n        'Critical (Yes/No)', 'Condition Based (Yes/No)',\n        'Installation Date', 'Commissioned Date', 'Rating', 'No of Units',\n        'Eqpt / System Department', 'Parent Component Code',\n        'Dimensions/Size', 'Notes',\n        // Section B\n        'Running Hours', 'Date Updated',\n        // Metrics (up to 5)\n        ...Array.from({ length: 5 }, (_, i) => [\n          `Metric${i + 1} Name`,\n          `Metric${i + 1} Value`,\n          `Metric${i + 1} Unit`\n        ]).flat(),\n        // Work Orders (up to 10)\n        ...Array.from({ length: 10 }, (_, i) => [\n          `WO${i + 1} Title`,\n          `WO${i + 1} Frequency Type (Calendar/Running Hours)`,\n          `WO${i + 1} Frequency Value`,\n          `WO${i + 1} Initial Next Due (Date)`,\n          `WO${i + 1} Assigned To (Rank)`\n        ]).flat(),\n        // Spares (up to 10)\n        ...Array.from({ length: 10 }, (_, i) => [\n          `SP${i + 1} Part Code`,\n          `SP${i + 1} Part Name`,\n          `SP${i + 1} Min`,\n          `SP${i + 1} Critical (Yes/No)`,\n          `SP${i + 1} Location`\n        ]).flat()\n      ];\n\n      validValues = [\n        'Required, Unique', 'Text', COMPONENT_CATEGORIES.join('|'),\n        'Text', 'Text', 'Text', 'Text', 'Text',\n        'Yes/No', 'Yes/No',\n        'DD-MM-YYYY', 'DD-MM-YYYY', 'Text', 'Number >= 0',\n        'Text', 'Existing Code or blank',\n        'Text', 'Text',\n        'Number >= 0', 'DD-MM-YYYY',\n        ...Array.from({ length: 5 }, () => ['Text', 'Number', 'Text']).flat(),\n        ...Array.from({ length: 10 }, () => [\n          'Text', 'Calendar/Running Hours', 'Number > 0', 'DD-MM-YYYY', 'Text'\n        ]).flat(),\n        ...Array.from({ length: 10 }, () => [\n          'Text', 'Text', 'Number >= 0', 'Yes/No', 'Text'\n        ]).flat()\n      ];\n\n      example = [\n        '1.1.1', 'Main Engine', 'Engine Department',\n        'MAN B&W', 'S60MC-C', '12345', 'DRW-001', 'Engine Room',\n        'Yes', 'Yes',\n        '01-01-2020', '15-03-2020', '15000 kW', '1',\n        'Engineering', '',\n        '10m x 5m x 8m', 'Main propulsion engine',\n        '25000', '15-01-2024',\n        ...Array.from({ length: 5 }, () => ['', '', '']).flat(),\n        'Cylinder Head Overhaul', 'Running Hours', '8000', '01-06-2024', 'Chief Engineer',\n        ...Array.from({ length: 9 }, () => ['', '', '', '', '']).flat(),\n        'SP-001', 'Cylinder Head Gasket', '2', 'Yes', 'Store Room A',\n        ...Array.from({ length: 9 }, () => ['', '', '', '', '']).flat()\n      ];\n      break;\n\n    case 'spares':\n      headers = [\n        'Part Code', 'Part Name', 'Component Code',\n        'UOM', 'Min', 'Critical (Yes/No)', 'ROB', 'Location',\n        'Maker', 'Model', 'Remarks'\n      ];\n\n      validValues = [\n        'Required, Unique', 'Required', 'Required, Must exist',\n        UOM_LIST.join('|'), 'Number >= 0', 'Yes/No', 'Number >= 0', 'Text',\n        'Text', 'Text', 'Text'\n      ];\n\n      example = [\n        'SP-001', 'Cylinder Head Gasket', '1.1.1',\n        'pcs', '2', 'Yes', '5', 'Store Room A',\n        'MAN B&W', 'GS-12345', 'For main engine only'\n      ];\n      break;\n\n    case 'stores':\n      headers = [\n        'Item Code', 'Item Name', 'Type',\n        'Stores Category', 'UOM', 'ROB', 'Min', 'Location',\n        'Application Area', 'Remarks'\n      ];\n\n      validValues = [\n        'Required, Unique', 'Required', 'Stores|Lubes|Chemicals|Others',\n        STORES_CATEGORIES.join('|'), UOM_LIST.join('|'), \n        'Number >= 0', 'Number >= 0', 'Text',\n        'Text', 'Text'\n      ];\n\n      example = [\n        'ST-001', 'Welding Electrodes', 'Stores',\n        'General Stores', 'kg', '50', '20', 'Workshop Store',\n        'Deck & Engine', 'AWS E6013 specification'\n      ];\n      break;\n  }\n\n  // Create main sheet\n  const mainSheet = XLSX.utils.aoa_to_sheet([headers, validValues, example]);\n  XLSX.utils.book_append_sheet(workbook, mainSheet, 'Data');\n\n  // Create meta sheet\n  const metaData = [\n    ['Template Type', type],\n    ['Template Version', '1.0'],\n    ['Generated At', new Date().toISOString()],\n    [''],\n    ['Component Categories', ...COMPONENT_CATEGORIES],\n    ['UOM List', ...UOM_LIST],\n    ['Stores Categories', ...STORES_CATEGORIES]\n  ];\n  const metaSheet = XLSX.utils.aoa_to_sheet(metaData);\n  XLSX.utils.book_append_sheet(workbook, metaSheet, 'Meta');\n\n  // Send file\n  const buffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'buffer' });\n  res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n  res.setHeader('Content-Disposition', `attachment; filename=\"${type}_template.xlsx\"`);\n  res.send(buffer);\n});\n\n// Dry-run validation\nrouter.post('/dry-run', upload.single('file'), async (req, res) => {\n  try {\n    const { type, mode, archiveMissing, vesselId } = req.body;\n    const file = req.file;\n\n    if (!file) {\n      return res.status(400).json({ error: 'No file uploaded' });\n    }\n\n    if (!['components', 'spares', 'stores'].includes(type)) {\n      return res.status(400).json({ error: 'Invalid type' });\n    }\n\n    if (!['add', 'update', 'upsert'].includes(mode)) {\n      return res.status(400).json({ error: 'Invalid mode' });\n    }\n\n    // Parse file based on extension\n    let data: any[] = [];\n    const ext = path.extname(file.originalname).toLowerCase();\n\n    if (ext === '.csv') {\n      const csvText = file.buffer.toString('utf-8');\n      const parsed = Papa.parse(csvText, { header: true, skipEmptyLines: true });\n      data = parsed.data;\n    } else if (['.xlsx', '.xls'].includes(ext)) {\n      const workbook = XLSX.read(file.buffer);\n      const firstSheet = workbook.Sheets[workbook.SheetNames[0]];\n      data = XLSX.utils.sheet_to_json(firstSheet);\n    } else {\n      return res.status(400).json({ error: 'Unsupported file format' });\n    }\n\n    // Validate data\n    const results = await validateData(type, data, mode, vesselId);\n    \n    // Generate file token\n    const fileToken = uuidv4();\n    \n    // Cache the results and file for import\n    dryRunCache.set(fileToken, {\n      type,\n      mode,\n      archiveMissing: archiveMissing === 'true',\n      vesselId,\n      data,\n      results,\n      file: file.buffer,\n      originalName: file.originalname,\n      timestamp: Date.now()\n    });\n\n    // Clean up old cache entries (older than 1 hour)\n    const oneHourAgo = Date.now() - 3600000;\n    Array.from(dryRunCache.entries()).forEach(([key, value]) => {\n      if (value.timestamp < oneHourAgo) {\n        dryRunCache.delete(key);\n      }\n    });\n\n    res.json({\n      fileToken,\n      columns: results.columns,\n      summary: results.summary,\n      rows: results.rows.slice(0, 100), // Limit preview to 100 rows\n      errorReportUrl: results.summary.errors > 0 ? `/api/bulk/history/tmp/${fileToken}/errors.csv` : undefined\n    });\n  } catch (error) {\n    console.error('Dry-run error:', error);\n    res.status(500).json({ error: 'Failed to process file' });\n  }\n});\n\n// Actual import\nrouter.post('/import', async (req, res) => {\n  try {\n    const { fileToken, type, mode, archiveMissing, vesselId } = req.body;\n\n    const cachedData = dryRunCache.get(fileToken);\n    if (!cachedData) {\n      return res.status(400).json({ error: 'Invalid or expired file token' });\n    }\n\n    // Check if there are errors\n    if (cachedData.results.summary.errors > 0) {\n      return res.status(400).json({ error: 'Cannot import file with errors' });\n    }\n\n    // Perform the actual import\n    const importResult = await performImport(\n      type,\n      cachedData.data,\n      mode,\n      archiveMissing,\n      vesselId,\n      (req as any).user?.id || 'system'\n    );\n\n    // Store in history\n    const historyId = uuidv4();\n    await storeImportHistory({\n      id: historyId,\n      type,\n      mode,\n      archiveMissing,\n      userId: (req as any).user?.id || 'system',\n      vesselId,\n      ...importResult,\n      startedAt: new Date(),\n      finishedAt: new Date(),\n      status: 'success',\n      originalFile: cachedData.file,\n      originalName: cachedData.originalName\n    });\n\n    // Clean up cache\n    dryRunCache.delete(fileToken);\n\n    res.json({\n      ...importResult,\n      historyId\n    });\n  } catch (error) {\n    console.error('Import error:', error);\n    res.status(500).json({ error: 'Failed to import data' });\n  }\n});\n\n// Get import history\nrouter.get('/history', async (req, res) => {\n  try {\n    const { type, limit = 20, offset = 0 } = req.query;\n    \n    const history = await getImportHistory(\n      type as string,\n      parseInt(limit as string),\n      parseInt(offset as string)\n    );\n\n    res.json(history);\n  } catch (error) {\n    console.error('History error:', error);\n    res.status(500).json({ error: 'Failed to fetch history' });\n  }\n});\n\n// Download history files\nrouter.get('/history/:id/:fileType', async (req, res) => {\n  try {\n    const { id, fileType } = req.params;\n    \n    const file = await getHistoryFile(id, fileType);\n    if (!file) {\n      return res.status(404).json({ error: 'File not found' });\n    }\n\n    res.setHeader('Content-Type', file.mimeType);\n    res.setHeader('Content-Disposition', `attachment; filename=\"${file.name}\"`);\n    res.send(file.data);\n  } catch (error) {\n    console.error('File download error:', error);\n    res.status(500).json({ error: 'Failed to download file' });\n  }\n});\n\n// Validation function\nasync function validateData(type: string, data: any[], mode: string, vesselId?: string) {\n  const results = {\n    columns: [] as string[],\n    summary: { ok: 0, warnings: 0, errors: 0 },\n    rows: [] as any[]\n  };\n\n  if (data.length === 0) {\n    results.summary.errors = 1;\n    return results;\n  }\n\n  // Get columns from first row\n  results.columns = Object.keys(data[0]);\n\n  // Validate each row based on type\n  for (let i = 0; i < data.length; i++) {\n    const row = data[i];\n    const rowNum = i + 2; // Excel rows start at 1, plus header\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    const normalized: any = {};\n\n    if (type === 'components') {\n      // Validate component\n      if (!row['Component Code']) {\n        errors.push(`Row ${rowNum}: Component Code is required`);\n      } else {\n        normalized['Component Code'] = row['Component Code'].trim();\n      }\n\n      if (!row['Component Category']) {\n        errors.push(`Row ${rowNum}: Component Category is required`);\n      } else if (!COMPONENT_CATEGORIES.includes(row['Component Category'])) {\n        errors.push(`Row ${rowNum}: Invalid Component Category. Allowed: ${COMPONENT_CATEGORIES.join(', ')}`);\n      } else {\n        normalized['Component Category'] = row['Component Category'];\n      }\n\n      // Validate Yes/No fields\n      ['Critical (Yes/No)', 'Condition Based (Yes/No)'].forEach(field => {\n        if (row[field]) {\n          const value = row[field].toString().toLowerCase();\n          if (!['yes', 'no'].includes(value)) {\n            errors.push(`Row ${rowNum}: ${field} must be Yes or No`);\n          } else {\n            normalized[field] = value === 'yes' ? 'Yes' : 'No';\n          }\n        }\n      });\n\n      // Validate numbers\n      ['No of Units', 'Running Hours'].forEach(field => {\n        if (row[field]) {\n          const num = parseFloat(row[field]);\n          if (isNaN(num) || num < 0) {\n            errors.push(`Row ${rowNum}: ${field} must be a non-negative number`);\n          } else {\n            normalized[field] = num;\n          }\n        }\n      });\n\n      // Copy other fields\n      Object.keys(row).forEach(key => {\n        if (!normalized[key]) {\n          normalized[key] = row[key];\n        }\n      });\n    } else if (type === 'spares') {\n      // Validate spare\n      if (!row['Part Code']) {\n        errors.push(`Row ${rowNum}: Part Code is required`);\n      } else {\n        normalized['Part Code'] = row['Part Code'].trim();\n      }\n\n      if (!row['Part Name']) {\n        errors.push(`Row ${rowNum}: Part Name is required`);\n      } else {\n        normalized['Part Name'] = row['Part Name'].trim();\n      }\n\n      if (!row['Component Code']) {\n        errors.push(`Row ${rowNum}: Component Code is required`);\n      } else {\n        normalized['Component Code'] = row['Component Code'].trim();\n        // TODO: Check if component exists\n      }\n\n      if (row['UOM'] && !UOM_LIST.includes(row['UOM'].toLowerCase())) {\n        errors.push(`Row ${rowNum}: Invalid UOM. Allowed: ${UOM_LIST.join(', ')}`);\n      } else if (row['UOM']) {\n        normalized['UOM'] = row['UOM'].toLowerCase();\n      }\n\n      // Validate numbers\n      ['Min', 'ROB'].forEach(field => {\n        if (row[field]) {\n          const num = parseFloat(row[field]);\n          if (isNaN(num) || num < 0) {\n            errors.push(`Row ${rowNum}: ${field} must be a non-negative number`);\n          } else {\n            normalized[field] = num;\n          }\n        }\n      });\n\n      // Validate Critical\n      if (row['Critical (Yes/No)']) {\n        const value = row['Critical (Yes/No)'].toString().toLowerCase();\n        if (!['yes', 'no'].includes(value)) {\n          errors.push(`Row ${rowNum}: Critical must be Yes or No`);\n        } else {\n          normalized['Critical (Yes/No)'] = value === 'yes' ? 'Yes' : 'No';\n        }\n      }\n\n      // Copy other fields\n      Object.keys(row).forEach(key => {\n        if (!normalized[key]) {\n          normalized[key] = row[key];\n        }\n      });\n    } else if (type === 'stores') {\n      // Validate stores\n      if (!row['Item Code']) {\n        errors.push(`Row ${rowNum}: Item Code is required`);\n      } else {\n        normalized['Item Code'] = row['Item Code'].trim();\n      }\n\n      if (!row['Item Name']) {\n        errors.push(`Row ${rowNum}: Item Name is required`);\n      } else {\n        normalized['Item Name'] = row['Item Name'].trim();\n      }\n\n      if (row['Type'] && !['Stores', 'Lubes', 'Chemicals', 'Others'].includes(row['Type'])) {\n        errors.push(`Row ${rowNum}: Invalid Type. Allowed: Stores, Lubes, Chemicals, Others`);\n      } else if (row['Type']) {\n        normalized['Type'] = row['Type'];\n      }\n\n      if (row['UOM'] && !UOM_LIST.includes(row['UOM'].toLowerCase())) {\n        errors.push(`Row ${rowNum}: Invalid UOM. Allowed: ${UOM_LIST.join(', ')}`);\n      } else if (row['UOM']) {\n        normalized['UOM'] = row['UOM'].toLowerCase();\n      }\n\n      // Validate numbers\n      ['ROB', 'Min'].forEach(field => {\n        if (row[field]) {\n          const num = parseFloat(row[field]);\n          if (isNaN(num) || num < 0) {\n            errors.push(`Row ${rowNum}: ${field} must be a non-negative number`);\n          } else {\n            normalized[field] = num;\n          }\n        }\n      });\n\n      // Copy other fields\n      Object.keys(row).forEach(key => {\n        if (!normalized[key]) {\n          normalized[key] = row[key];\n        }\n      });\n    }\n\n    // Determine status\n    let status: 'ok' | 'warning' | 'error' = 'ok';\n    if (errors.length > 0) {\n      status = 'error';\n      results.summary.errors++;\n    } else if (warnings.length > 0) {\n      status = 'warning';\n      results.summary.warnings++;\n    } else {\n      results.summary.ok++;\n    }\n\n    results.rows.push({\n      row: rowNum,\n      status,\n      errors: [...errors, ...warnings],\n      normalized\n    });\n  }\n\n  return results;\n}\n\n// Perform actual import\nasync function performImport(\n  type: string,\n  data: any[],\n  mode: string,\n  archiveMissing: boolean,\n  vesselId: string | undefined,\n  userId: string\n) {\n  const result = {\n    created: 0,\n    updated: 0,\n    skipped: 0,\n    archived: 0\n  };\n\n  // TODO: Implement actual database operations\n  // This is a placeholder that simulates the import\n  for (const row of data) {\n    if (mode === 'add') {\n      // Check if exists, if yes skip, else create\n      result.created++;\n    } else if (mode === 'update') {\n      // Check if exists, if yes update, else skip\n      result.updated++;\n    } else if (mode === 'upsert') {\n      // Create or update\n      const exists = Math.random() > 0.5; // Simulated check\n      if (exists) {\n        result.updated++;\n      } else {\n        result.created++;\n      }\n    }\n  }\n\n  if (archiveMissing) {\n    // Archive records not in the file\n    result.archived = Math.floor(Math.random() * 5); // Simulated\n  }\n\n  return result;\n}\n\n// Store import history\nasync function storeImportHistory(data: any) {\n  // TODO: Store in database\n  // For now, using in-memory storage\n  if (!global.importHistory) {\n    global.importHistory = [];\n  }\n  global.importHistory.push(data);\n}\n\n// Get import history\nasync function getImportHistory(type: string | undefined, limit: number, offset: number) {\n  // TODO: Fetch from database\n  const history = global.importHistory || [];\n  \n  let filtered = history;\n  if (type) {\n    filtered = history.filter((h: any) => h.type === type);\n  }\n\n  return {\n    items: filtered.slice(offset, offset + limit).map((h: any) => ({\n      id: h.id,\n      date: h.startedAt,\n      user: h.userId,\n      mode: h.mode,\n      created: h.created,\n      updated: h.updated,\n      skipped: h.skipped,\n      archived: h.archived\n    })),\n    total: filtered.length\n  };\n}\n\n// Get history file\nasync function getHistoryFile(id: string, fileType: string) {\n  // TODO: Fetch from file storage\n  const history = (global.importHistory || []).find((h: any) => h.id === id);\n  \n  if (!history) return null;\n\n  if (fileType === 'file') {\n    return {\n      data: history.originalFile,\n      mimeType: 'application/octet-stream',\n      name: history.originalName\n    };\n  }\n\n  // Generate error report or result map as needed\n  return null;\n}\n\n// Declare global for TypeScript\ndeclare global {\n  var importHistory: any[];\n}\n\nexport default router;"]}