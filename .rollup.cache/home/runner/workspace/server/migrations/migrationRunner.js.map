{"version":3,"file":"migrationRunner.js","sourceRoot":"","sources":["migrationRunner.ts"],"names":[],"mappings":";AACA,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AACtC,OAAO,EAAE,IAAI,EAAE,MAAM,MAAM,CAAC;AAS5B;IAGE,yBAAY,OAAwB;QAClC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAEK,uCAAa,GAAnB;;;;;;wBACQ,cAAc,GAAG,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;wBACrB,qBAAM,OAAO,CAAC,cAAc,CAAC,EAAA;;wBAA9C,cAAc,GAAG,SAA6B;wBAG9C,UAAU,GAAG,cAAc;6BAC9B,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAArD,CAAqD,CAAC;6BACrE,IAAI,EAAE,CAAC;wBAEV,OAAO,CAAC,GAAG,CAAC,gBAAS,UAAU,CAAC,MAAM,qBAAkB,CAAC,CAAC;8BAEpB,EAAV,yBAAU;;;6BAAV,CAAA,wBAAU,CAAA;wBAA3B,aAAa;wBACE,qBAAM,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC,EAAA;;wBAAnE,eAAe,GAAG,SAAiD;wBACnE,SAAS,GAAc,eAAe,CAAC,OAAO,CAAC;;;;wBAGnD,qBAAM,SAAS,CAAC,EAAE,EAAE,EAAA;;wBAApB,SAAoB,CAAC;wBACrB,OAAO,CAAC,GAAG,CAAC,2BAAe,SAAS,CAAC,EAAE,eAAK,SAAS,CAAC,IAAI,gBAAa,CAAC,CAAC;;;;wBAEzE,OAAO,CAAC,KAAK,CAAC,2BAAe,SAAS,CAAC,EAAE,aAAU,EAAE,OAAK,CAAC,CAAC;wBAC5D,MAAM,OAAK,CAAC;;wBATY,IAAU,CAAA;;;;;;KAYvC;IAEK,2CAAiB,GAAvB,UAAwB,WAAmB;;;;;;wBACnC,cAAc,GAAG,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;wBACrB,qBAAM,OAAO,CAAC,cAAc,CAAC,EAAA;;wBAA9C,cAAc,GAAG,SAA6B;wBAE9C,aAAa,GAAG,cAAc,CAAC,IAAI,CAAC,UAAA,IAAI;4BAC5C,OAAA,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;wBAAlD,CAAkD,CACnD,CAAC;wBAEF,IAAI,CAAC,aAAa,EAAE,CAAC;4BACnB,MAAM,IAAI,KAAK,CAAC,oBAAa,WAAW,eAAY,CAAC,CAAC;wBACxD,CAAC;wBAEuB,qBAAM,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC,EAAA;;wBAAnE,eAAe,GAAG,SAAiD;wBACnE,SAAS,GAAc,eAAe,CAAC,OAAO,CAAC;;;;wBAGnD,qBAAM,SAAS,CAAC,IAAI,EAAE,EAAA;;wBAAtB,SAAsB,CAAC;wBACvB,OAAO,CAAC,GAAG,CAAC,2BAAe,SAAS,CAAC,EAAE,eAAK,SAAS,CAAC,IAAI,kBAAe,CAAC,CAAC;;;;wBAE3E,OAAO,CAAC,KAAK,CAAC,oCAAwB,SAAS,CAAC,EAAE,aAAU,EAAE,OAAK,CAAC,CAAC;wBACrE,MAAM,OAAK,CAAC;;;;;KAEf;IACH,sBAAC;AAAD,CAAC,AAvDD,IAuDC","sourcesContent":["import { DatabaseStorage } from \"../database\";\nimport { readdir } from \"fs/promises\";\nimport { join } from \"path\";\n\nexport interface Migration {\n  id: string;\n  name: string;\n  up: () => Promise<void>;\n  down: () => Promise<void>;\n}\n\nexport class MigrationRunner {\n  private storage: DatabaseStorage;\n\n  constructor(storage: DatabaseStorage) {\n    this.storage = storage;\n  }\n\n  async runMigrations(): Promise<void> {\n    const migrationsPath = join(__dirname, '.');\n    const migrationFiles = await readdir(migrationsPath);\n    \n    // Filter for migration files (exclude this runner)\n    const migrations = migrationFiles\n      .filter(file => file.startsWith('migration_') && file.endsWith('.ts'))\n      .sort();\n\n    console.log(`Found ${migrations.length} migration files`);\n\n    for (const migrationFile of migrations) {\n      const migrationModule = await import(join(migrationsPath, migrationFile));\n      const migration: Migration = migrationModule.default;\n\n      try {\n        await migration.up();\n        console.log(`✓ Migration ${migration.id} (${migration.name}) completed`);\n      } catch (error) {\n        console.error(`✗ Migration ${migration.id} failed:`, error);\n        throw error;\n      }\n    }\n  }\n\n  async rollbackMigration(migrationId: string): Promise<void> {\n    const migrationsPath = join(__dirname, '.');\n    const migrationFiles = await readdir(migrationsPath);\n    \n    const migrationFile = migrationFiles.find(file => \n      file.includes(migrationId) && file.endsWith('.ts')\n    );\n\n    if (!migrationFile) {\n      throw new Error(`Migration ${migrationId} not found`);\n    }\n\n    const migrationModule = await import(join(migrationsPath, migrationFile));\n    const migration: Migration = migrationModule.default;\n\n    try {\n      await migration.down();\n      console.log(`✓ Migration ${migration.id} (${migration.name}) rolled back`);\n    } catch (error) {\n      console.error(`✗ Migration rollback ${migration.id} failed:`, error);\n      throw error;\n    }\n  }\n}"]}