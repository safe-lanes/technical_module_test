{"version":3,"file":"routes.js","sourceRoot":"","sources":["routes.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Express } from 'express';\nimport { createServer, type Server } from 'http';\nimport { storage } from './storage';\nimport { insertRunningHoursAuditSchema } from '@shared/schema';\nimport { z } from 'zod';\nimport bulkRoutes from './routes/bulk';\nimport alertRoutes from './routes/alerts';\nimport formRoutes from './routes/forms';\nimport createChangeRequestsRouter from './routes/changeRequests';\nimport { requestLogger } from './middleware/logger';\nimport {\n  globalErrorHandler,\n  notFoundHandler,\n  asyncHandler,\n} from './middleware/errorHandler';\nimport {\n  requireAuth,\n  requirePermission,\n  authenticateUser,\n} from './middleware/auth';\nimport { Permission } from '../shared/types/auth';\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Add request logging middleware only for API routes\n  app.use('/api', requestLogger);\n\n  // Authentication routes (public)\n  app.post(\n    '/api/auth/login',\n    asyncHandler(async (req, res) => {\n      const { username, password } = req.body;\n\n      if (!username || !password) {\n        return res\n          .status(400)\n          .json({ error: 'Username and password are required' });\n      }\n\n      const result = await authenticateUser(username, password);\n      res.json(result);\n    })\n  );\n\n  app.post('/api/auth/logout', (req, res) => {\n    // In production, you would invalidate the token\n    res.json({ success: true, message: 'Logged out successfully' });\n  });\n\n  // Health check endpoint\n  app.get(\n    '/api/health',\n    asyncHandler(async (req, res) => {\n      let dbStatus = 'unknown';\n      try {\n        // Import MySQL database for health check\n        const { storage: mysqlStorage } = await import('./database');\n        const isHealthy = await mysqlStorage.healthCheck();\n        dbStatus = isHealthy ? 'connected' : 'disconnected';\n      } catch (error) {\n        dbStatus = 'error';\n        console.error('Database health check error:', error);\n      }\n\n      res.json({\n        status: 'healthy',\n        timestamp: new Date().toISOString(),\n        environment: process.env.NODE_ENV,\n        database: {\n          type: 'MySQL RDS',\n          status: dbStatus,\n        },\n      });\n    })\n  );\n\n  // Components API routes (for Target Picker) - requires authentication\n  app.get(\n    '/api/components/:vesselId',\n    requireAuth,\n    requirePermission(Permission.COMPONENTS_READ),\n    asyncHandler(async (req, res) => {\n      const components = await storage.getComponents(req.params.vesselId);\n      res.json(components);\n    })\n  );\n\n  // Work Orders API routes\n  app.get('/api/work-orders/:vesselId', async (req, res) => {\n    try {\n      const { vesselId } = req.params;\n      console.log('🔄 MySQL DB Operation: getWorkOrders', { vesselId });\n\n      const workOrdersData = await storage.getWorkOrders(vesselId);\n      res.json(workOrdersData);\n    } catch (error) {\n      console.error('❌ Failed to fetch work orders:', error);\n      res.status(500).json({ error: 'Failed to fetch work orders' });\n    }\n  });\n\n  app.post('/api/work-orders/:vesselId', async (req, res) => {\n    try {\n      const { vesselId } = req.params;\n      const workOrderData = req.body;\n\n      // Add vesselId to the data\n      workOrderData.vesselId = vesselId;\n\n      console.log('🔄 MySQL DB Operation: createWorkOrder', workOrderData);\n\n      const newWorkOrder = await storage.createWorkOrder(workOrderData);\n      res.json(newWorkOrder);\n    } catch (error) {\n      console.error('❌ Failed to create work order:', error);\n      res.status(500).json({ error: 'Failed to create work order' });\n    }\n  });\n\n  app.put('/api/work-orders/:vesselId/:workOrderId', async (req, res) => {\n    try {\n      const { vesselId, workOrderId } = req.params;\n      const workOrderData = req.body;\n\n      console.log('🔄 MySQL DB Operation: updateWorkOrder', {\n        vesselId,\n        workOrderId,\n        ...workOrderData,\n      });\n\n      const updatedWorkOrder = await storage.updateWorkOrder(\n        workOrderId,\n        workOrderData\n      );\n      res.json(updatedWorkOrder);\n    } catch (error) {\n      console.error('❌ Failed to update work order:', error);\n      res.status(500).json({ error: 'Failed to update work order' });\n    }\n  });\n\n  app.delete('/api/work-orders/:vesselId/:workOrderId', async (req, res) => {\n    try {\n      const { vesselId, workOrderId } = req.params;\n\n      console.log('🔄 MySQL DB Operation: deleteWorkOrder', {\n        vesselId,\n        workOrderId,\n      });\n\n      await storage.deleteWorkOrder(workOrderId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error('❌ Failed to delete work order:', error);\n      res.status(500).json({ error: 'Failed to delete work order' });\n    }\n  });\n\n  // Legacy route for Target Picker compatibility\n  app.get('/api/work-orders', async (req, res) => {\n    try {\n      // Default to vessel V001 for legacy compatibility\n      const workOrdersData = await storage.getWorkOrders('V001');\n      res.json(workOrdersData);\n    } catch (error) {\n      console.error('❌ Failed to fetch work orders (legacy route):', error);\n      res.status(500).json({ error: 'Failed to fetch work orders' });\n    }\n  });\n\n  // Running Hours API routes\n\n  // Get components for a vessel\n  app.get('/api/running-hours/components/:vesselId', async (req, res) => {\n    try {\n      const components = await storage.getComponents(req.params.vesselId);\n      res.json(components);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch components' });\n    }\n  });\n\n  // Update component running hours\n  app.post('/api/running-hours/update/:componentId', async (req, res) => {\n    try {\n      const { componentId } = req.params;\n      const updateData = req.body;\n\n      console.log(\n        '🔍 Update data received:',\n        JSON.stringify(updateData, null, 2)\n      );\n\n      // Ensure numeric values are converted to strings for MySQL decimal fields\n      // and timestamp fields are converted to Date objects\n      const auditData = {\n        ...updateData.audit,\n        previousRH: updateData.audit.previousRH.toString(),\n        newRH: updateData.audit.newRH.toString(),\n        cumulativeRH: updateData.audit.cumulativeRH.toString(),\n        oldMeterFinal: updateData.audit.oldMeterFinal\n          ? updateData.audit.oldMeterFinal.toString()\n          : null,\n        newMeterStart: updateData.audit.newMeterStart\n          ? updateData.audit.newMeterStart.toString()\n          : null,\n        enteredAtUTC: new Date(updateData.audit.enteredAtUTC), // Convert string to Date object for MySQL timestamp\n      };\n\n      // Create audit entry\n      const audit = await storage.createRunningHoursAudit(auditData);\n\n      // Update component\n      const component = await storage.updateComponent(componentId, {\n        currentCumulativeRH: updateData.cumulativeRH.toString(),\n        lastUpdated: updateData.dateUpdatedLocal,\n      });\n\n      res.json({ component, audit });\n    } catch (error) {\n      console.error('❌ Failed to update running hours:', error);\n      res.status(500).json({\n        error: 'Failed to update running hours',\n        details: error.message,\n      });\n    }\n  });\n\n  // Bulk update running hours\n  app.post('/api/running-hours/bulk-update', async (req, res) => {\n    try {\n      const updates = req.body.updates;\n      const results = [];\n\n      console.log(\n        '🔍 Bulk update data received:',\n        JSON.stringify(updates, null, 2)\n      );\n\n      for (const update of updates) {\n        // Apply same data type conversions as single update\n        const auditData = {\n          ...update.audit,\n          previousRH: update.audit.previousRH.toString(),\n          newRH: update.audit.newRH.toString(),\n          cumulativeRH: update.audit.cumulativeRH.toString(),\n          oldMeterFinal: update.audit.oldMeterFinal\n            ? update.audit.oldMeterFinal.toString()\n            : null,\n          newMeterStart: update.audit.newMeterStart\n            ? update.audit.newMeterStart.toString()\n            : null,\n          enteredAtUTC: new Date(update.audit.enteredAtUTC), // Convert string to Date object for MySQL timestamp\n        };\n\n        const audit = await storage.createRunningHoursAudit(auditData);\n        const component = await storage.updateComponent(update.componentId, {\n          currentCumulativeRH: update.cumulativeRH.toString(),\n          lastUpdated: update.dateUpdatedLocal,\n        });\n        results.push({ component, audit });\n      }\n\n      res.json({ results });\n    } catch (error) {\n      console.error('❌ Failed to perform bulk update:', error);\n      res.status(500).json({\n        error: 'Failed to perform bulk update',\n        details: error.message,\n      });\n    }\n  });\n\n  // Get running hours audits for a component\n  app.get('/api/running-hours/audits/:componentId', async (req, res) => {\n    try {\n      const { componentId } = req.params;\n      const limit = req.query.limit\n        ? parseInt(req.query.limit as string)\n        : undefined;\n      const audits = await storage.getRunningHoursAudits(componentId, limit);\n      res.json(audits);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch audits' });\n    }\n  });\n\n  // Get utilization rate for components\n  app.post('/api/running-hours/utilization-rates', async (req, res) => {\n    try {\n      const { componentIds } = req.body;\n      const rates: Record<string, number | null> = {};\n\n      const today = new Date();\n      const thirtyDaysAgo = new Date(today);\n      thirtyDaysAgo.setDate(today.getDate() - 30);\n\n      for (const componentId of componentIds) {\n        const audits = await storage.getRunningHoursAuditsInDateRange(\n          componentId,\n          thirtyDaysAgo,\n          today\n        );\n\n        // Get anchor point (most recent before window)\n        const allAudits = await storage.getRunningHoursAudits(componentId);\n        const anchorAudit = allAudits.find(\n          a => new Date(a.dateUpdatedLocal) < thirtyDaysAgo\n        );\n\n        const windowAudits = anchorAudit ? [anchorAudit, ...audits] : audits;\n\n        if (windowAudits.length < 2) {\n          rates[componentId] = null;\n        } else {\n          const start = windowAudits[0];\n          const end = windowAudits[windowAudits.length - 1];\n\n          const deltaHours =\n            parseFloat(end.cumulativeRH) - parseFloat(start.cumulativeRH);\n          const startDate = new Date(start.dateUpdatedLocal);\n          const endDate = new Date(end.dateUpdatedLocal);\n          const deltaDays = Math.max(\n            (endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24),\n            1\n          );\n\n          const utilization = Math.max(deltaHours / deltaDays, 0);\n          rates[componentId] = Math.round(utilization * 10) / 10;\n        }\n      }\n\n      res.json(rates);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to calculate utilization rates' });\n    }\n  });\n\n  // Spares API routes\n\n  // Get all spares for a vessel\n  app.get('/api/spares/:vesselId', async (req, res) => {\n    try {\n      const spares = await storage.getSpares(req.params.vesselId);\n      // Calculate stock status server-side\n      const sparesWithStatus = spares.map(spare => ({\n        ...spare,\n        stockStatus:\n          spare.rob < spare.min\n            ? 'Low'\n            : spare.rob === spare.min\n              ? 'Minimum'\n              : 'OK',\n      }));\n      res.json(sparesWithStatus);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch spares' });\n    }\n  });\n\n  // Get single spare\n  app.get('/api/spares/item/:id', async (req, res) => {\n    try {\n      const spare = await storage.getSpare(parseInt(req.params.id));\n      if (!spare) {\n        return res.status(404).json({ error: 'Spare not found' });\n      }\n      res.json(spare);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch spare' });\n    }\n  });\n\n  // Create new spare\n  app.post('/api/spares', async (req, res) => {\n    try {\n      const spare = await storage.createSpare(req.body);\n      res.json(spare);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to create spare' });\n    }\n  });\n\n  // Update spare\n  app.put('/api/spares/:id', async (req, res) => {\n    try {\n      const spare = await storage.updateSpare(\n        parseInt(req.params.id),\n        req.body\n      );\n      res.json(spare);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to update spare' });\n    }\n  });\n\n  // Delete spare\n  app.delete('/api/spares/:id', async (req, res) => {\n    try {\n      await storage.deleteSpare(parseInt(req.params.id));\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to delete spare' });\n    }\n  });\n\n  // Consume spare\n  app.post('/api/spares/:id/consume', async (req, res) => {\n    try {\n      const { vesselId, qty, dateLocal, tz, place, remarks, userId } = req.body;\n\n      // Validation\n      if (!qty || qty < 1) {\n        return res.status(400).json({ error: 'Quantity must be at least 1' });\n      }\n\n      // Check if date is not in future\n      const today = new Date();\n      const inputDate = new Date(dateLocal);\n      if (inputDate > today) {\n        return res.status(400).json({ error: 'Date cannot be in the future' });\n      }\n\n      const spare = await storage.consumeSpare(\n        parseInt(req.params.id),\n        qty,\n        userId || 'user',\n        remarks,\n        place,\n        dateLocal,\n        tz || 'UTC'\n      );\n\n      // Calculate stock status for response\n      const spareWithStatus = {\n        ...spare,\n        stockStatus:\n          spare.rob < spare.min\n            ? 'Low'\n            : spare.rob === spare.min\n              ? 'Minimum'\n              : 'OK',\n      };\n\n      res.json(spareWithStatus);\n    } catch (error: any) {\n      if (error.message === 'Insufficient stock') {\n        res.status(400).json({ error: error.message });\n      } else {\n        res.status(500).json({ error: 'Failed to consume spare' });\n      }\n    }\n  });\n\n  // Receive spare\n  app.post('/api/spares/:id/receive', async (req, res) => {\n    try {\n      const {\n        vesselId,\n        qty,\n        dateLocal,\n        tz,\n        place,\n        supplierPO,\n        remarks,\n        userId,\n      } = req.body;\n\n      // Validation\n      if (!qty || qty < 1) {\n        return res.status(400).json({ error: 'Quantity must be at least 1' });\n      }\n\n      // Check if date is not in future\n      const today = new Date();\n      const inputDate = new Date(dateLocal);\n      if (inputDate > today) {\n        return res.status(400).json({ error: 'Date cannot be in the future' });\n      }\n\n      const spare = await storage.receiveSpare(\n        parseInt(req.params.id),\n        qty,\n        userId || 'user',\n        remarks,\n        supplierPO,\n        place,\n        dateLocal,\n        tz || 'UTC'\n      );\n\n      // Calculate stock status for response\n      const spareWithStatus = {\n        ...spare,\n        stockStatus:\n          spare.rob < spare.min\n            ? 'Low'\n            : spare.rob === spare.min\n              ? 'Minimum'\n              : 'OK',\n      };\n\n      res.json(spareWithStatus);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to receive spare' });\n    }\n  });\n\n  // Bulk update spares\n  app.post('/api/spares/bulk-update', async (req, res) => {\n    try {\n      const { vesselId, tz, rows } = req.body;\n\n      // Process each row and collect results\n      const results = [];\n\n      for (const row of rows) {\n        // Skip rows where both consumed and received are 0\n        if (row.consumed === 0 && row.received === 0) {\n          results.push({\n            componentSpareId: row.componentSpareId,\n            success: false,\n            message: null, // Skipped\n          });\n          continue;\n        }\n\n        try {\n          const spare = await storage.getSpare(row.componentSpareId);\n          if (!spare) {\n            results.push({\n              componentSpareId: row.componentSpareId,\n              success: false,\n              message: 'Spare not found',\n            });\n            continue;\n          }\n\n          // Validate insufficient stock\n          if (row.consumed > 0 && spare.rob < row.consumed) {\n            results.push({\n              componentSpareId: row.componentSpareId,\n              success: false,\n              message: 'Insufficient stock',\n            });\n            continue;\n          }\n\n          // Process consume\n          if (row.consumed > 0) {\n            await storage.consumeSpare(\n              row.componentSpareId,\n              row.consumed,\n              row.userId || 'user',\n              row.remarks,\n              undefined,\n              row.dateLocal || new Date().toISOString().split('T')[0],\n              tz || 'UTC'\n            );\n          }\n\n          // Process receive\n          if (row.received > 0) {\n            await storage.receiveSpare(\n              row.componentSpareId,\n              row.received,\n              row.userId || 'user',\n              row.remarks,\n              undefined,\n              row.receivedPlace,\n              row.receivedDate,\n              tz || 'UTC'\n            );\n          }\n\n          // Get updated spare\n          const updatedSpare = await storage.getSpare(row.componentSpareId);\n          results.push({\n            componentSpareId: row.componentSpareId,\n            success: true,\n            robAfter: updatedSpare?.rob || 0,\n          });\n        } catch (error: any) {\n          results.push({\n            componentSpareId: row.componentSpareId,\n            success: false,\n            message: error.message || 'Failed to update',\n          });\n        }\n      }\n\n      res.json(results);\n    } catch (error: any) {\n      res.status(500).json({ error: 'Failed to perform bulk update' });\n    }\n  });\n\n  // Get spares history\n  app.get('/api/spares/history/:vesselId', async (req, res) => {\n    try {\n      const history = await storage.getSpareHistory(req.params.vesselId);\n      res.json(history);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch history' });\n    }\n  });\n\n  // Get history for specific spare\n  app.get('/api/spares/history/spare/:spareId', async (req, res) => {\n    try {\n      const history = await storage.getSpareHistoryBySpareId(\n        parseInt(req.params.spareId)\n      );\n      res.json(history);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch spare history' });\n    }\n  });\n\n  // Stores API routes\n  app.get('/api/stores/:vesselId', async (req, res) => {\n    try {\n      const { vesselId } = req.params;\n      const items = await storage.getStoreItems(vesselId);\n      res.json(items);\n    } catch (error) {\n      console.error('Error fetching store items:', error);\n      res.status(500).json({ error: 'Failed to fetch store items' });\n    }\n  });\n\n  app.post('/api/stores/:vesselId/transaction', async (req, res) => {\n    try {\n      const { vesselId } = req.params;\n      const transaction = {\n        ...req.body,\n        vesselId,\n        timestampUTC: new Date(),\n        userId: (req as any).user?.id || 'system',\n      };\n      const result = await storage.createStoreTransaction(transaction);\n      res.json(result);\n    } catch (error) {\n      console.error('Error creating store transaction:', error);\n      res.status(500).json({ error: 'Failed to create transaction' });\n    }\n  });\n\n  app.get('/api/stores/:vesselId/history', async (req, res) => {\n    try {\n      const { vesselId } = req.params;\n      const history = await storage.getStoreHistory(vesselId);\n      res.json(history);\n    } catch (error) {\n      console.error('Error fetching store history:', error);\n      res.status(500).json({ error: 'Failed to fetch store history' });\n    }\n  });\n\n  // Update store item details\n  app.put('/api/stores/:vesselId/item/:itemCode', async (req, res) => {\n    try {\n      const { vesselId, itemCode } = req.params;\n      const { itemName, uom, minStock, location, notes } = req.body;\n\n      console.log(`🔄 MySQL DB Operation: updateStoreItem`, {\n        vesselId,\n        itemCode,\n        itemName,\n        uom,\n        minStock,\n        location,\n        notes,\n      });\n\n      const result = await storage.updateStoreItem(vesselId, itemCode, {\n        itemName,\n        uom,\n        minStock,\n        location,\n        notes,\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error('Error updating store item:', error);\n      res.status(500).json({ error: 'Failed to update store item' });\n    }\n  });\n\n  // Change Request API routes\n\n  // Get change requests with filters\n  app.get('/api/modify-pms/requests', async (req, res) => {\n    try {\n      const filters = {\n        category: req.query.category as string,\n        status: req.query.status as string,\n        q: req.query.q as string,\n        vesselId: req.query.vesselId as string,\n      };\n\n      const requests = await storage.getChangeRequests(filters);\n      res.json(requests);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch change requests' });\n    }\n  });\n\n  // Get single change request\n  app.get('/api/modify-pms/requests/:id', async (req, res) => {\n    try {\n      const request = await storage.getChangeRequest(parseInt(req.params.id));\n      if (!request) {\n        return res.status(404).json({ error: 'Change request not found' });\n      }\n\n      // Get attachments and comments\n      const attachments = await storage.getChangeRequestAttachments(request.id);\n      const comments = await storage.getChangeRequestComments(request.id);\n\n      res.json({ ...request, attachments, comments });\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch change request' });\n    }\n  });\n\n  // Create change request (draft)\n  app.post('/api/modify-pms/requests', async (req, res) => {\n    try {\n      const { vesselId, category, title, reason } = req.body;\n\n      // Validation for draft - only title required\n      if (!title) {\n        return res.status(400).json({ error: 'Title is required' });\n      }\n\n      const request = await storage.createChangeRequest({\n        vesselId: vesselId || '',\n        category: category || 'components',\n        title: title.substring(0, 120), // Enforce max length\n        reason: reason || '',\n        status: 'draft',\n        requestedByUserId: req.body.userId || 'current_user',\n      });\n\n      res.json(request);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to create change request' });\n    }\n  });\n\n  // Update change request (draft/returned only)\n  app.put('/api/modify-pms/requests/:id', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const existing = await storage.getChangeRequest(id);\n\n      if (!existing) {\n        return res.status(404).json({ error: 'Change request not found' });\n      }\n\n      if (existing.status !== 'draft' && existing.status !== 'returned') {\n        return res\n          .status(400)\n          .json({ error: 'Can only edit draft or returned requests' });\n      }\n\n      const { vesselId, category, title, reason } = req.body;\n\n      const updated = await storage.updateChangeRequest(id, {\n        vesselId,\n        category,\n        title: title?.substring(0, 120),\n        reason,\n      });\n\n      res.json(updated);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to update change request' });\n    }\n  });\n\n  // Update change request target (draft/returned only)\n  app.put('/api/modify-pms/requests/:id/target', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { targetType, targetId, snapshotBeforeJson } = req.body;\n\n      const updated = await storage.updateChangeRequestTarget(\n        id,\n        targetType,\n        targetId,\n        snapshotBeforeJson\n      );\n      res.json(updated);\n    } catch (error: any) {\n      res\n        .status(500)\n        .json({ error: error.message || 'Failed to update target' });\n    }\n  });\n\n  // Update proposed changes (draft/returned only)\n  app.put('/api/modify-pms/requests/:id/proposed', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { proposedChangesJson, movePreviewJson } = req.body;\n\n      const updated = await storage.updateChangeRequestProposed(\n        id,\n        proposedChangesJson,\n        movePreviewJson\n      );\n      res.json(updated);\n    } catch (error: any) {\n      res\n        .status(500)\n        .json({ error: error.message || 'Failed to update proposed changes' });\n    }\n  });\n\n  // Submit change request\n  app.put('/api/modify-pms/requests/:id/submit', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const existing = await storage.getChangeRequest(id);\n\n      if (!existing) {\n        return res.status(404).json({ error: 'Change request not found' });\n      }\n\n      if (existing.status !== 'draft' && existing.status !== 'returned') {\n        return res\n          .status(400)\n          .json({ error: 'Can only submit draft or returned requests' });\n      }\n\n      // Validate required fields for submission - now including target and proposed changes\n      if (\n        !existing.title ||\n        !existing.category ||\n        !existing.vesselId ||\n        !existing.reason ||\n        !existing.targetType ||\n        !existing.targetId ||\n        !existing.snapshotBeforeJson\n      ) {\n        return res.status(400).json({\n          error:\n            'Title, Category, Vessel, Reason, and Target selection are required for submission',\n        });\n      }\n\n      // Check if proposed changes exist and are non-empty\n      if (\n        !existing.proposedChangesJson ||\n        (Array.isArray(existing.proposedChangesJson) &&\n          existing.proposedChangesJson.length === 0)\n      ) {\n        return res.status(400).json({\n          error: 'Please propose at least one change before submitting',\n        });\n      }\n\n      const updated = await storage.submitChangeRequest(\n        id,\n        req.body.userId || 'current_user'\n      );\n      res.json(updated);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to submit change request' });\n    }\n  });\n\n  // Approve change request (office only)\n  app.put('/api/modify-pms/requests/:id/approve', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { comment, reviewerId } = req.body;\n\n      if (!comment) {\n        return res\n          .status(400)\n          .json({ error: 'Comment is required for approval' });\n      }\n\n      const updated = await storage.approveChangeRequest(\n        id,\n        reviewerId || 'reviewer',\n        comment\n      );\n      res.json(updated);\n    } catch (error: any) {\n      res\n        .status(500)\n        .json({ error: error.message || 'Failed to approve change request' });\n    }\n  });\n\n  // Reject change request (office only)\n  app.put('/api/modify-pms/requests/:id/reject', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { comment, reviewerId } = req.body;\n\n      if (!comment) {\n        return res\n          .status(400)\n          .json({ error: 'Comment is required for rejection' });\n      }\n\n      const updated = await storage.rejectChangeRequest(\n        id,\n        reviewerId || 'reviewer',\n        comment\n      );\n      res.json(updated);\n    } catch (error: any) {\n      res\n        .status(500)\n        .json({ error: error.message || 'Failed to reject change request' });\n    }\n  });\n\n  // Return change request for clarification (office only)\n  app.put('/api/modify-pms/requests/:id/return', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { comment, reviewerId } = req.body;\n\n      if (!comment) {\n        return res\n          .status(400)\n          .json({ error: 'Comment is required for return' });\n      }\n\n      const updated = await storage.returnChangeRequest(\n        id,\n        reviewerId || 'reviewer',\n        comment\n      );\n      res.json(updated);\n    } catch (error: any) {\n      res\n        .status(500)\n        .json({ error: error.message || 'Failed to return change request' });\n    }\n  });\n\n  // Delete change request (draft only)\n  app.delete('/api/modify-pms/requests/:id', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteChangeRequest(id);\n      res.json({ success: true });\n    } catch (error: any) {\n      res\n        .status(500)\n        .json({ error: error.message || 'Failed to delete change request' });\n    }\n  });\n\n  // Create attachment\n  app.post('/api/modify-pms/requests/:id/attachments', async (req, res) => {\n    try {\n      const changeRequestId = parseInt(req.params.id);\n      const { filename, url, uploadedByUserId } = req.body;\n\n      if (!filename || !url) {\n        return res.status(400).json({ error: 'Filename and URL are required' });\n      }\n\n      const attachment = await storage.createChangeRequestAttachment({\n        changeRequestId,\n        filename,\n        url,\n        uploadedByUserId: uploadedByUserId || 'current_user',\n      });\n\n      res.json(attachment);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to create attachment' });\n    }\n  });\n\n  // Create comment\n  app.post('/api/modify-pms/requests/:id/comments', async (req, res) => {\n    try {\n      const changeRequestId = parseInt(req.params.id);\n      const { message, userId } = req.body;\n\n      if (!message) {\n        return res.status(400).json({ error: 'Message is required' });\n      }\n\n      const comment = await storage.createChangeRequestComment({\n        changeRequestId,\n        userId: userId || 'current_user',\n        message,\n      });\n\n      res.json(comment);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to create comment' });\n    }\n  });\n\n  // Register bulk import routes\n  app.use('/api/bulk', bulkRoutes);\n  app.use('/api/alerts', alertRoutes);\n  app.use('/api', formRoutes);\n  app.use('/api/change-requests', createChangeRequestsRouter(storage));\n\n  // Error handling middleware (only for API routes - must be last)\n  app.use('/api', notFoundHandler);\n  app.use('/api', globalErrorHandler);\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n"]}