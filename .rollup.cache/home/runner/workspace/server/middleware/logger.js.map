{"version":3,"file":"logger.js","sourceRoot":"","sources":["logger.ts"],"names":[],"mappings":"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","sourcesContent":["import winston from 'winston';\nimport DailyRotateFile from 'winston-daily-rotate-file';\nimport { Request, Response, NextFunction } from 'express';\nimport path from 'path';\n\n// Create logs directory if it doesn't exist\nconst logsDir = path.join(process.cwd(), 'logs');\n\n// Winston configuration\nconst logger = winston.createLogger({\n  level: process.env.LOG_LEVEL || 'info',\n  format: winston.format.combine(\n    winston.format.timestamp({\n      format: 'YYYY-MM-DD HH:mm:ss',\n    }),\n    winston.format.errors({ stack: true }),\n    winston.format.json()\n  ),\n  defaultMeta: { service: 'maritime-pms' },\n  transports: [\n    // Console logging\n    new winston.transports.Console({\n      format: winston.format.combine(\n        winston.format.colorize(),\n        winston.format.simple()\n      ),\n    }),\n\n    // Daily rotating file for all logs\n    new DailyRotateFile({\n      filename: path.join(logsDir, 'application-%DATE%.log'),\n      datePattern: 'YYYY-MM-DD',\n      zippedArchive: true,\n      maxSize: '20m',\n      maxFiles: '30d',\n    }),\n\n    // Separate file for errors only\n    new DailyRotateFile({\n      level: 'error',\n      filename: path.join(logsDir, 'error-%DATE%.log'),\n      datePattern: 'YYYY-MM-DD',\n      zippedArchive: true,\n      maxSize: '20m',\n      maxFiles: '30d',\n    }),\n  ],\n});\n\n// Request logging middleware\nexport const requestLogger = (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  const startTime = Date.now();\n\n  res.on('finish', () => {\n    const duration = Date.now() - startTime;\n    const logData = {\n      method: req.method,\n      url: req.originalUrl,\n      status: res.statusCode,\n      duration: `${duration}ms`,\n      userAgent: req.get('User-Agent'),\n      ip: req.ip || req.connection.remoteAddress,\n      timestamp: new Date().toISOString(),\n    };\n\n    if (res.statusCode >= 400) {\n      logger.error('HTTP Error', logData);\n    } else if (res.statusCode >= 300) {\n      logger.warn('HTTP Redirect', logData);\n    } else {\n      logger.info('HTTP Request', logData);\n    }\n  });\n\n  next();\n};\n\n// Export logger for use throughout the application\nexport { logger };\n\nexport default logger;\n"]}