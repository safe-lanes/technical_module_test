{"version":3,"file":"ChangeModeContext.jsx","sourceRoot":"","sources":["ChangeModeContext.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\n\ninterface Diff {\n  path: string;\n  oldVal: any;\n  newVal: any;\n}\n\ninterface ChangeModeContextType {\n  isChangeMode: boolean;\n  changeRequestTitle?: string;\n  changeRequestCategory?: string;\n  originalSnapshot: any;\n  diffs: Diff[];\n  setOriginalSnapshot: (snapshot: any) => void;\n  collectDiff: (path: string, oldVal: any, newVal: any) => void;\n  getDiffs: () => Diff[];\n  reset: () => void;\n  enterChangeMode: (title?: string, category?: string) => void;\n  exitChangeMode: () => void;\n}\n\nconst ChangeModeContext = createContext<ChangeModeContextType | undefined>(\n  undefined\n);\n\nexport const ChangeModeProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  const [location] = useLocation();\n  const [isChangeMode, setIsChangeMode] = useState(false);\n  const [changeRequestTitle, setChangeRequestTitle] = useState<string>();\n  const [changeRequestCategory, setChangeRequestCategory] = useState<string>();\n  const [originalSnapshot, setOriginalSnapshot] = useState<any>(null);\n  const [diffs, setDiffs] = useState<Diff[]>([]);\n\n  // Check URL params for change request mode\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const editAsChangeRequest = params.get('editAsChangeRequest');\n    const crTitle = params.get('crTitle');\n    const crCategory = params.get('crCategory');\n\n    if (editAsChangeRequest === '1') {\n      setIsChangeMode(true);\n      setChangeRequestTitle(crTitle || undefined);\n      setChangeRequestCategory(crCategory || undefined);\n    } else {\n      setIsChangeMode(false);\n      setChangeRequestTitle(undefined);\n      setChangeRequestCategory(undefined);\n      setDiffs([]);\n    }\n  }, [location]);\n\n  const collectDiff = (path: string, oldVal: any, newVal: any) => {\n    // Don't collect if values are the same\n    if (JSON.stringify(oldVal) === JSON.stringify(newVal)) {\n      // Remove diff if it exists\n      setDiffs(prev => prev.filter(d => d.path !== path));\n      return;\n    }\n\n    setDiffs(prev => {\n      const existing = prev.findIndex(d => d.path === path);\n      if (existing >= 0) {\n        const updated = [...prev];\n        updated[existing] = { path, oldVal, newVal };\n        return updated;\n      }\n      return [...prev, { path, oldVal, newVal }];\n    });\n  };\n\n  const getDiffs = () => diffs;\n\n  const reset = () => {\n    setDiffs([]);\n    setOriginalSnapshot(null);\n  };\n\n  const enterChangeMode = (title?: string, category?: string) => {\n    setIsChangeMode(true);\n    setChangeRequestTitle(title);\n    setChangeRequestCategory(category);\n  };\n\n  const exitChangeMode = () => {\n    setIsChangeMode(false);\n    setChangeRequestTitle(undefined);\n    setChangeRequestCategory(undefined);\n    reset();\n  };\n\n  return (\n    <ChangeModeContext.Provider\n      value={{\n        isChangeMode,\n        changeRequestTitle,\n        changeRequestCategory,\n        originalSnapshot,\n        diffs,\n        setOriginalSnapshot,\n        collectDiff,\n        getDiffs,\n        reset,\n        enterChangeMode,\n        exitChangeMode,\n      }}\n    >\n      {children}\n    </ChangeModeContext.Provider>\n  );\n};\n\nexport const useChangeMode = () => {\n  const context = useContext(ChangeModeContext);\n  if (!context) {\n    throw new Error('useChangeMode must be used within ChangeModeProvider');\n  }\n  return context;\n};\n\n// Helper hook for form fields\nexport const useChangeModeField = (fieldPath: string, originalValue: any) => {\n  const { isChangeMode, collectDiff } = useChangeMode();\n  const [hasChanged, setHasChanged] = useState(false);\n\n  const handleChange = (newValue: any) => {\n    if (isChangeMode) {\n      const changed =\n        JSON.stringify(originalValue) !== JSON.stringify(newValue);\n      setHasChanged(changed);\n      collectDiff(fieldPath, originalValue, newValue);\n    }\n  };\n\n  return {\n    isChangeMode,\n    hasChanged,\n    originalValue,\n    handleChange,\n  };\n};\n"]}