{"version":3,"file":"ChangeRequestContext.jsx","sourceRoot":"","sources":["ChangeRequestContext.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,EAAE,EAAE,aAAa,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AA8BnE,IAAM,oBAAoB,GAAG,aAAa,CAExC,SAAS,CAAC,CAAC;AAEb,sFAAsF;AACtF,IAAM,cAAc,GAAW;IAC7B;QACE,EAAE,EAAE,GAAG;QACP,IAAI,EAAE,gBAAgB;QACtB,IAAI,EAAE,UAAU;QAChB,KAAK,EAAE,gBAAgB;KACxB;IACD,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,cAAc,EAAE;IAC3E;QACE,EAAE,EAAE,GAAG;QACP,IAAI,EAAE,0BAA0B;QAChC,IAAI,EAAE,UAAU;QAChB,KAAK,EAAE,0BAA0B;KAClC;CACF,CAAC;AAEF,MAAM,CAAC,IAAM,qBAAqB,GAA4C,UAAC,EAE9E;QADC,QAAQ,cAAA;IAEF,IAAA,KAAgD,QAAQ,CAAC,KAAK,CAAC,EAA9D,mBAAmB,QAAA,EAAE,sBAAsB,QAAmB,CAAC;IAChE,IAAA,KAAkC,QAAQ,EAE7C,EAFI,YAAY,QAAA,EAAE,eAAe,QAEjC,CAAC;IACE,IAAA,KAAoC,QAAQ,CAAsB,EAAE,CAAC,EAApE,aAAa,QAAA,EAAE,gBAAgB,QAAqC,CAAC;IACtE,IAAA,KAAgC,QAAQ,CAAO,cAAc,CAAC,CAAC,CAAC,CAAC,EAAhE,WAAW,QAAA,EAAE,cAAc,QAAqC,CAAC,CAAC,0BAA0B;IAEnG,IAAM,sBAAsB,GAAG,UAC7B,QAAgB,EAChB,YAAiC;QAEjC,sBAAsB,CAAC,IAAI,CAAC,CAAC;QAC7B,eAAe,CAAC,YAAY,CAAC,CAAC;QAC9B,gBAAgB,CAAC,EAAE,CAAC,CAAC;IACvB,CAAC,CAAC;IAEF,IAAM,qBAAqB,GAAG;QAC5B,sBAAsB,CAAC,KAAK,CAAC,CAAC;QAC9B,eAAe,CAAC,SAAS,CAAC,CAAC;QAC3B,gBAAgB,CAAC,EAAE,CAAC,CAAC;IACvB,CAAC,CAAC;IAEF,IAAM,kBAAkB,GAAG,UAAC,SAAiB,EAAE,KAAU;QACvD,gBAAgB,CAAC,UAAA,IAAI;;YAAI,OAAA,uBACpB,IAAI,gBACN,SAAS,IAAG,KAAK,OAClB;QAHuB,CAGvB,CAAC,CAAC;IACN,CAAC,CAAC;IAEF,IAAM,kBAAkB,GAAG;QACzB,gBAAgB,CAAC,EAAE,CAAC,CAAC;IACvB,CAAC,CAAC;IAEF,OAAO,CACL,CAAC,oBAAoB,CAAC,QAAQ,CAC5B,KAAK,CAAC,CAAC;YACL,mBAAmB,qBAAA;YACnB,YAAY,cAAA;YACZ,aAAa,eAAA;YACb,WAAW,aAAA;YACX,cAAc,gBAAA;YACd,sBAAsB,wBAAA;YACtB,qBAAqB,uBAAA;YACrB,kBAAkB,oBAAA;YAClB,kBAAkB,oBAAA;YAClB,aAAa,EAAE,kBAAkB;SAClC,CAAC,CAEF;MAAA,CAAC,QAAQ,CACX;IAAA,EAAE,oBAAoB,CAAC,QAAQ,CAAC,CACjC,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,gBAAgB,GAAG;IAC9B,IAAM,OAAO,GAAG,UAAU,CAAC,oBAAoB,CAAC,CAAC;IACjD,IAAI,OAAO,KAAK,SAAS,EAAE,CAAC;QAC1B,MAAM,IAAI,KAAK,CACb,8DAA8D,CAC/D,CAAC;IACJ,CAAC;IACD,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC","sourcesContent":["import React, { createContext, useContext, useState } from 'react';\n// User roles and interfaces\nexport type UserRole = 'requestor' | 'approver';\n\nexport interface User {\n  id: string;\n  name: string;\n  role: UserRole;\n  title?: string;\n}\n\nexport interface FormModeContext {\n  isChangeRequestMode: boolean;\n  originalData?: Record<string, any>;\n  changedFields: Record<string, any>;\n  onFieldChange?: (fieldName: string, value: any) => void;\n}\n\ninterface ChangeRequestContextType extends FormModeContext {\n  currentUser: User;\n  setCurrentUser: (user: User) => void;\n  enterChangeRequestMode: (\n    category: string,\n    originalData: Record<string, any>\n  ) => void;\n  exitChangeRequestMode: () => void;\n  updateChangedField: (fieldName: string, value: any) => void;\n  resetChangedFields: () => void;\n}\n\nconst ChangeRequestContext = createContext<\n  ChangeRequestContextType | undefined\n>(undefined);\n\n// Simulate current users for testing - in production this would come from auth system\nconst simulatedUsers: User[] = [\n  {\n    id: '1',\n    name: 'Chief Engineer',\n    role: 'approver',\n    title: 'Chief Engineer',\n  },\n  { id: '2', name: '2nd Engineer', role: 'requestor', title: '2nd Engineer' },\n  {\n    id: '3',\n    name: 'Technical Superintendent',\n    role: 'approver',\n    title: 'Technical Superintendent',\n  },\n];\n\nexport const ChangeRequestProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  const [isChangeRequestMode, setIsChangeRequestMode] = useState(false);\n  const [originalData, setOriginalData] = useState<\n    Record<string, any> | undefined\n  >();\n  const [changedFields, setChangedFields] = useState<Record<string, any>>({});\n  const [currentUser, setCurrentUser] = useState<User>(simulatedUsers[1]); // Default to 2nd Engineer\n\n  const enterChangeRequestMode = (\n    category: string,\n    originalData: Record<string, any>\n  ) => {\n    setIsChangeRequestMode(true);\n    setOriginalData(originalData);\n    setChangedFields({});\n  };\n\n  const exitChangeRequestMode = () => {\n    setIsChangeRequestMode(false);\n    setOriginalData(undefined);\n    setChangedFields({});\n  };\n\n  const updateChangedField = (fieldName: string, value: any) => {\n    setChangedFields(prev => ({\n      ...prev,\n      [fieldName]: value,\n    }));\n  };\n\n  const resetChangedFields = () => {\n    setChangedFields({});\n  };\n\n  return (\n    <ChangeRequestContext.Provider\n      value={{\n        isChangeRequestMode,\n        originalData,\n        changedFields,\n        currentUser,\n        setCurrentUser,\n        enterChangeRequestMode,\n        exitChangeRequestMode,\n        updateChangedField,\n        resetChangedFields,\n        onFieldChange: updateChangedField,\n      }}\n    >\n      {children}\n    </ChangeRequestContext.Provider>\n  );\n};\n\nexport const useChangeRequest = () => {\n  const context = useContext(ChangeRequestContext);\n  if (context === undefined) {\n    throw new Error(\n      'useChangeRequest must be used within a ChangeRequestProvider'\n    );\n  }\n  return context;\n};\n"]}