{"version":3,"file":"queryClient.js","sourceRoot":"","sources":["queryClient.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,WAAW,EAAiB,MAAM,uBAAuB,CAAC;AAEnE,SAAe,eAAe,CAAC,GAAa;;;;;;yBACtC,CAAC,GAAG,CAAC,EAAE,EAAP,wBAAO;oBACK,qBAAM,GAAG,CAAC,IAAI,EAAE,EAAA;;oBAAxB,IAAI,GAAG,CAAC,SAAgB,CAAC,IAAI,GAAG,CAAC,UAAU;oBACjD,MAAM,IAAI,KAAK,CAAC,UAAG,GAAG,CAAC,MAAM,eAAK,IAAI,CAAE,CAAC,CAAC;;;;;CAE7C;AAED,MAAM,UAAgB,UAAU,CAC9B,MAAc,EACd,GAAW,EACX,IAA0B;;;;;wBAEd,qBAAM,KAAK,CAAC,GAAG,EAAE;wBAC3B,MAAM,QAAA;wBACN,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC,CAAC,CAAC,EAAE;wBAC3D,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS;wBAC7C,WAAW,EAAE,SAAS;qBACvB,CAAC,EAAA;;oBALI,GAAG,GAAG,SAKV;oBAEF,qBAAM,eAAe,CAAC,GAAG,CAAC,EAAA;;oBAA1B,SAA0B,CAAC;oBAC3B,sBAAO,GAAG,EAAC;;;;CACZ;AAGD,MAAM,CAAC,IAAM,UAAU,GAGrB,UAAC,EAA+B;QAAtB,oBAAoB,WAAA;IAC9B,OAAA,iEAAO,EAAY;;YAAV,QAAQ,cAAA;;;wBACH,qBAAM,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAW,EAAE;wBAC7C,WAAW,EAAE,SAAS;qBACvB,CAAC,EAAA;;oBAFI,GAAG,GAAG,SAEV;oBAEF,IAAI,oBAAoB,KAAK,YAAY,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE,CAAC;wBAChE,sBAAO,IAAI,EAAC;oBACd,CAAC;oBAED,qBAAM,eAAe,CAAC,GAAG,CAAC,EAAA;;oBAA1B,SAA0B,CAAC;oBACpB,qBAAM,GAAG,CAAC,IAAI,EAAE,EAAA;wBAAvB,sBAAO,SAAgB,EAAC;;;SACzB;AAXD,CAWC,CAAC;AAEJ,MAAM,CAAC,IAAM,WAAW,GAAG,IAAI,WAAW,CAAC;IACzC,cAAc,EAAE;QACd,OAAO,EAAE;YACP,OAAO,EAAE,UAAU,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC;YACvC,eAAe,EAAE,KAAK;YACtB,oBAAoB,EAAE,KAAK;YAC3B,SAAS,EAAE,QAAQ;YACnB,KAAK,EAAE,KAAK;SACb;QACD,SAAS,EAAE;YACT,KAAK,EAAE,KAAK;SACb;KACF;CACF,CAAC,CAAC","sourcesContent":["import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n"]}