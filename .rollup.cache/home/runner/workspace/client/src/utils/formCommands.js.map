{"version":3,"file":"formCommands.js","sourceRoot":"","sources":["formCommands.ts"],"names":[],"mappings":"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","sourcesContent":["\n// Form creation commands interface\nexport class FormCommands {\n  \n  /**\n   * Create a Form Editor for a specific form using a simple command\n   * Usage: FormCommands.createFormEditor(\"Crew Promotion Form\")\n   */\n  static createFormEditor(formName: string): void {\n    try {\n      const { createFormEditor } = require('./formEditorGenerator');\n      createFormEditor(formName);\n      console.log(`‚úÖ Form Editor created successfully for: ${formName}`);\n      console.log(`üìù You can now edit this form in Admin > Forms Configuration`);\n    } catch (error) {\n      console.error(`‚ùå Error creating Form Editor for ${formName}:`, error);\n    }\n  }\n\n  /**\n   * List all available form templates\n   */\n  static listTemplates(): string[] {\n    const { formTemplates } = require('./formEditorGenerator');\n    const templates = Object.keys(formTemplates);\n    console.log(\"üìã Available form templates:\");\n    templates.forEach((template, index) => {\n      console.log(`  ${index + 1}. ${template}`);\n    });\n    return templates;\n  }\n\n  /**\n   * Create a new form in the database and generate its editor\n   */\n  static async createFormWithEditor(formName: string, templateName?: string): Promise<void> {\n    try {\n      // Create form in database\n      const response = await fetch('/api/forms', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          name: formName,\n          versionNo: \"00\",\n          versionDate: new Date().toLocaleDateString('en-GB', {\n            day: '2-digit',\n            month: 'short',\n            year: 'numeric'\n          }).replace(/ /g, '-')\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to create form: ${response.statusText}`);\n      }\n\n      console.log(`‚úÖ Form \"${formName}\" created in database`);\n\n      // Generate form editor if template is specified\n      if (templateName) {\n        this.createFormEditor(templateName);\n      }\n\n      console.log(`üéâ Process completed! Form \"${formName}\" is ready to use.`);\n    } catch (error) {\n      console.error(`‚ùå Error creating form with editor:`, error);\n    }\n  }\n\n  /**\n   * Quick command to create a complete form setup\n   */\n  static quickCreate(formName: string): void {\n    console.log(`üöÄ Creating Form Editor for: ${formName}`);\n    \n    // Check if template exists\n    const { formTemplates } = require('./formEditorGenerator');\n    if (formTemplates[formName]) {\n      this.createFormEditor(formName);\n      console.log(`‚ú® Quick creation completed for: ${formName}`);\n      console.log(`üìç Next steps:`);\n      console.log(`   1. Go to Admin > Forms Configuration`);\n      console.log(`   2. Click the edit button for \"${formName}\"`);\n      console.log(`   3. Configure fields and save your form`);\n    } else {\n      console.log(`‚ùå Template not found for: ${formName}`);\n      console.log(`üìã Available templates:`);\n      this.listTemplates();\n    }\n  }\n}\n\n// Make it globally accessible for console commands\nif (typeof window !== 'undefined') {\n  (window as any).FormCommands = FormCommands;\n}\n\nexport default FormCommands;\n"]}