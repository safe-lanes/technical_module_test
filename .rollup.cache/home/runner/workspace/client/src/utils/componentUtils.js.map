{"version":3,"file":"componentUtils.js","sourceRoot":"","sources":["componentUtils.ts"],"names":[],"mappings":"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","sourcesContent":["// Component Category mapping based on top-level group\nexport const getComponentCategory = (componentId: string): string => {\n  // Extract the first level from the component ID\n  const topLevelId = componentId.split('.')[0];\n\n  // Map top-level ID to category name\n  const categoryMap: Record<string, string> = {\n    '1': 'Ship General',\n    '2': 'Hull',\n    '3': 'Equipment for Cargo',\n    '4': \"Ship's Equipment\",\n    '5': 'Equipment for Crew & Passengers',\n    '6': 'Machinery Main Components',\n    '7': 'Systems for Machinery Main Components',\n    '8': 'Ship Common Systems',\n  };\n\n  return categoryMap[topLevelId] || '';\n};\n\n// Find a component node by ID in the tree\nexport const findComponentNode = (\n  nodes: any[],\n  targetId: string\n): any | null => {\n  for (const node of nodes) {\n    if (node.id === targetId) {\n      return node;\n    }\n    if (node.children) {\n      const found = findComponentNode(node.children, targetId);\n      if (found) return found;\n    }\n  }\n  return null;\n};\n\n// Build component tree from flat list\nexport const buildComponentTree = (components: any[]): any[] => {\n  if (!components || components.length === 0) return [];\n\n  // Create a map for quick lookup\n  const componentMap = new Map();\n  components.forEach(comp => {\n    componentMap.set(comp.id || comp.componentId, { ...comp, children: [] });\n  });\n\n  const tree: any[] = [];\n\n  // Build the tree structure\n  components.forEach(comp => {\n    const node = componentMap.get(comp.id || comp.componentId);\n    if (comp.parentId) {\n      const parent = componentMap.get(comp.parentId);\n      if (parent) {\n        parent.children.push(node);\n      } else {\n        // If parent not found, add to root\n        tree.push(node);\n      }\n    } else {\n      // No parent means it's a root node\n      tree.push(node);\n    }\n  });\n\n  // Sort nodes at each level by code\n  const sortTree = (nodes: any[]) => {\n    nodes.sort((a, b) => {\n      const aCode = a.code || a.componentCode || '';\n      const bCode = b.code || b.componentCode || '';\n      return aCode.localeCompare(bCode, undefined, { numeric: true });\n    });\n    nodes.forEach(node => {\n      if (node.children && node.children.length > 0) {\n        sortTree(node.children);\n      }\n    });\n  };\n\n  sortTree(tree);\n  return tree;\n};\n"]}