{"version":3,"file":"useModifyMode.js","sourceRoot":"","sources":["useModifyMode.ts"],"names":[],"mappings":"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","sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { useLocation, useSearch } from 'wouter';\n\ninterface FieldChange {\n  fieldName: string;\n  originalValue: any;\n  currentValue: any;\n  timestamp: Date;\n}\n\ninterface ModifyModeState {\n  isModifyMode: boolean;\n  targetType: string | null;\n  targetId: string | null;\n  fieldChanges: Record<string, FieldChange>;\n  originalSnapshot: Record<string, any>;\n}\n\nexport function useModifyMode() {\n  const [location, setLocation] = useLocation();\n  const search = useSearch();\n  const searchParams = new URLSearchParams(search);\n\n  const [state, setState] = useState<ModifyModeState>({\n    isModifyMode: searchParams.get('modify') === '1',\n    targetType: searchParams.get('targetType'),\n    targetId: searchParams.get('targetId'),\n    fieldChanges: {},\n    originalSnapshot: {},\n  });\n\n  // Update state when URL changes\n  useEffect(() => {\n    const newSearchParams = new URLSearchParams(search);\n    setState(prev => ({\n      ...prev,\n      isModifyMode: newSearchParams.get('modify') === '1',\n      targetType: newSearchParams.get('targetType'),\n      targetId: newSearchParams.get('targetId'),\n    }));\n  }, [search]);\n\n  // Enable modify mode for a specific target\n  const enableModifyMode = useCallback(\n    (targetType: string, targetId?: string) => {\n      const newParams = new URLSearchParams(search);\n      newParams.set('modify', '1');\n      newParams.set('targetType', targetType);\n      if (targetId) {\n        newParams.set('targetId', targetId);\n      }\n      setLocation(`${location.split('?')[0]}?${newParams.toString()}`);\n    },\n    [location, search, setLocation]\n  );\n\n  // Disable modify mode\n  const disableModifyMode = useCallback(() => {\n    const newParams = new URLSearchParams(search);\n    newParams.delete('modify');\n    newParams.delete('targetType');\n    newParams.delete('targetId');\n\n    const newSearch = newParams.toString();\n    setLocation(`${location.split('?')[0]}${newSearch ? `?${newSearch}` : ''}`);\n\n    // Clear field changes\n    setState(prev => ({\n      ...prev,\n      fieldChanges: {},\n      originalSnapshot: {},\n    }));\n  }, [location, search, setLocation]);\n\n  // Set original snapshot for comparison\n  const setOriginalSnapshot = useCallback((snapshot: Record<string, any>) => {\n    setState(prev => ({\n      ...prev,\n      originalSnapshot: snapshot,\n    }));\n  }, []);\n\n  // Track field changes\n  const trackFieldChange = useCallback(\n    (fieldName: string, newValue: any, oldValue?: any) => {\n      setState(prev => {\n        const originalValue =\n          oldValue !== undefined ? oldValue : prev.originalSnapshot[fieldName];\n\n        // If the new value equals the original value, remove the change\n        if (newValue === originalValue) {\n          const { [fieldName]: removed, ...remainingChanges } =\n            prev.fieldChanges;\n          return {\n            ...prev,\n            fieldChanges: remainingChanges,\n          };\n        }\n\n        // Add or update the field change\n        return {\n          ...prev,\n          fieldChanges: {\n            ...prev.fieldChanges,\n            [fieldName]: {\n              fieldName,\n              originalValue,\n              currentValue: newValue,\n              timestamp: new Date(),\n            },\n          },\n        };\n      });\n    },\n    []\n  );\n\n  // Get change summary\n  const getChangeSummary = useCallback(() => {\n    const changes = Object.values(state.fieldChanges);\n    return {\n      hasChanges: changes.length > 0,\n      changedFieldsCount: changes.length,\n      changes,\n    };\n  }, [state.fieldChanges]);\n\n  // Generate change request payload\n  const generateChangeRequestPayload = useCallback(() => {\n    const changes = Object.values(state.fieldChanges);\n    if (changes.length === 0) return null;\n\n    return {\n      category: state.targetType,\n      targetType: state.targetType,\n      targetId: state.targetId,\n      snapshotBefore: state.originalSnapshot,\n      proposedChanges: changes.map(change => ({\n        field: change.fieldName,\n        from: change.originalValue,\n        to: change.currentValue,\n        timestamp: change.timestamp.toISOString(),\n      })),\n    };\n  }, [state]);\n\n  return {\n    isModifyMode: state.isModifyMode,\n    targetType: state.targetType,\n    targetId: state.targetId,\n    enableModifyMode,\n    disableModifyMode,\n    setOriginalSnapshot,\n    trackFieldChange,\n    getChangeSummary,\n    generateChangeRequestPayload,\n    fieldChanges: state.fieldChanges,\n  };\n}\n"]}