{"version":3,"file":"FormEditorFactory.jsx","sourceRoot":"","sources":["FormEditorFactory.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAI1B,8BAA8B;AAC9B,IAAM,WAAW,GAA6C;AAC5D,4DAA4D;AAC5D,4CAA4C;CAC7C,CAAC;AAUF,MAAM,CAAC,IAAM,iBAAiB,GAAqC,UAAC,EAMnE;QALC,QAAQ,cAAA,EACR,IAAI,UAAA,EACJ,aAAa,mBAAA,EACb,OAAO,aAAA,EACP,MAAM,YAAA;IAEN,uCAAuC;IACvC,IAAM,eAAe,GAAG,WAAW,CAAC,QAAQ,CAAC,CAAC;IAE9C,IAAI,CAAC,eAAe,EAAE,CAAC;QACrB,OAAO,CACL,CAAC,GAAG,CAAC,SAAS,CAAC,gFAAgF,CAC7F;QAAA,CAAC,GAAG,CAAC,SAAS,CAAC,mDAAmD,CAChE;UAAA,CAAC,EAAE,CAAC,SAAS,CAAC,4BAA4B,CAAC,qBAAqB,EAAE,EAAE,CACpE;UAAA,CAAC,CAAC,CAAC,SAAS,CAAC,oBAAoB,CAC/B;6CAAiC,CAAC,QAAQ,CAAC;;UAE7C,EAAE,CAAC,CACH;UAAA,CAAC,MAAM,CACL,OAAO,CAAC,CAAC,OAAO,CAAC,CACjB,SAAS,CAAC,4DAA4D,CAEtE;;UACF,EAAE,MAAM,CACV;QAAA,EAAE,GAAG,CACP;MAAA,EAAE,GAAG,CAAC,CACP,CAAC;IACJ,CAAC;IAED,OAAO,CACL,CAAC,eAAe,CACd,IAAI,CAAC,CAAC,IAAI,CAAC,CACX,aAAa,CAAC,CAAC,aAAa,CAAC,CAC7B,OAAO,CAAC,CAAC,OAAO,CAAC,CACjB,MAAM,CAAC,CAAC,MAAM,CAAC,EACf,CACH,CAAC;AACJ,CAAC,CAAC;AAEF,yCAAyC;AACzC,MAAM,CAAC,IAAM,kBAAkB,GAAG,UAChC,QAAgB,EAChB,SAAmC;IAEnC,WAAW,CAAC,QAAQ,CAAC,GAAG,SAAS,CAAC;AACpC,CAAC,CAAC;AAEF,0CAA0C;AAC1C,MAAM,CAAC,IAAM,aAAa,GAAG,UAAC,QAAgB;IAC5C,OAAO,QAAQ,IAAI,WAAW,CAAC;AACjC,CAAC,CAAC","sourcesContent":["import React from 'react';\n// import { FormEditor } from '@/pages/FormEditor'; // Not implemented yet\nimport { FormVersion } from '@shared/schema';\n\n// Dynamic form editor mapping\nconst formEditors: Record<string, React.ComponentType<any>> = {\n  // 'Crew Appraisal Form': FormEditor, // Not implemented yet\n  // Add more form editors as they are created\n};\n\ninterface FormEditorFactoryProps {\n  formName: string;\n  form: FormVersion;\n  rankGroupName?: string;\n  onClose: () => void;\n  onSave: (data: any) => void;\n}\n\nexport const FormEditorFactory: React.FC<FormEditorFactoryProps> = ({\n  formName,\n  form,\n  rankGroupName,\n  onClose,\n  onSave,\n}) => {\n  // Get the appropriate editor component\n  const EditorComponent = formEditors[formName];\n\n  if (!EditorComponent) {\n    return (\n      <div className='fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4'>\n        <div className='bg-white rounded-lg shadow-lg p-6 max-w-md w-full'>\n          <h3 className='text-lg font-semibold mb-4'>Form Editor Not Found</h3>\n          <p className='text-gray-600 mb-4'>\n            No form editor is available for \"{formName}\". Please create one\n            using the Form Editor Generator.\n          </p>\n          <button\n            onClick={onClose}\n            className='bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700'\n          >\n            Close\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <EditorComponent\n      form={form}\n      rankGroupName={rankGroupName}\n      onClose={onClose}\n      onSave={onSave}\n    />\n  );\n};\n\n// Function to register a new form editor\nexport const registerFormEditor = (\n  formName: string,\n  component: React.ComponentType<any>\n) => {\n  formEditors[formName] = component;\n};\n\n// Function to check if form editor exists\nexport const hasFormEditor = (formName: string): boolean => {\n  return formName in formEditors;\n};\n"]}