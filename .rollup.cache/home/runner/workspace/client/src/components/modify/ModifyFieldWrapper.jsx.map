{"version":3,"file":"ModifyFieldWrapper.jsx","sourceRoot":"","sources":["ModifyFieldWrapper.tsx"],"names":[],"mappings":";AAAA,OAAO,EAAa,YAAY,EAAE,cAAc,EAAE,MAAM,OAAO,CAAC;AAChE,OAAO,EAAE,EAAE,EAAE,MAAM,aAAa,CAAC;AAWjC,MAAM,UAAU,kBAAkB,CAAC,EAOT;QANxB,QAAQ,cAAA,EACR,aAAa,mBAAA,EACb,YAAY,kBAAA,EACZ,SAAS,eAAA,EACT,YAAY,kBAAA,EACZ,aAAa,mBAAA;IAEb,uCAAuC;IACvC,IAAM,UAAU,GAAG,aAAa,KAAK,SAAS,IAAI,aAAa,KAAK,YAAY,CAAC;IAEjF,4CAA4C;IAC5C,IAAM,aAAa,GAAG,SAAS,CAAC,CAAC,2BAA2B;IAC5D,IAAM,YAAY,GAAG,SAAS,CAAC,CAAE,yBAAyB;IAE1D,IAAI,CAAC,YAAY,EAAE,CAAC;QAClB,OAAO,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC;IACzB,CAAC;IAED,2EAA2E;IAC3E,IAAM,gBAAgB,GAAG,cAAc,CAAC,QAAQ,CAAC;QAC/C,CAAC,CAAC,YAAY,CAAC,QAAe,EAAE;YAC5B,QAAQ,EAAE,UAAC,CAAM;;gBACf,sCAAsC;gBACtC,IAAK,QAAgB,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;oBACpC,QAAgB,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACtC,CAAC;gBACD,yBAAyB;gBACzB,IAAI,aAAa,EAAE,CAAC;oBAClB,IAAM,QAAQ,GAAG,CAAA,MAAA,CAAC,CAAC,MAAM,0CAAE,KAAK,MAAK,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;oBACpE,aAAa,CAAC,SAAS,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;gBACpD,CAAC;YACH,CAAC;YACD,sBAAsB;YACtB,KAAK,wBACC,QAAgB,CAAC,KAAK,CAAC,KAAK,KAChC,WAAW,EAAE,UAAU,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,aAAa,EACtD,WAAW,EAAE,KAAK,GACnB;YACD,SAAS,EAAE,EAAE,CACV,QAAgB,CAAC,KAAK,CAAC,SAAS,EACjC,gCAAgC,CACjC;SACF,CAAC;QACJ,CAAC,CAAC,QAAQ,CAAC;IAEb,OAAO,CACL,CAAC,GAAG,CAAC,SAAS,CAAC,UAAU,CACvB;MAAA,CAAC,yCAAyC,CAC1C;MAAA,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,CAChB,UAAU,EACV,UAAU,IAAI,+GAA+G,CAC9H,CAAC,CACA;QAAA,CAAC,gBAAgB,CACnB;MAAA,EAAE,GAAG,CAEL;;MAAA,CAAC,0CAA0C,CAC3C;MAAA,CAAC,UAAU,IAAI,CACb,CAAC,GAAG,CAAC,SAAS,CAAC,4FAA4F,EAAG,CAC/G,CAED;;MAAA,CAAC,2CAA2C,CAC9C;IAAA,EAAE,GAAG,CAAC,CACP,CAAC;AACJ,CAAC","sourcesContent":["import { ReactNode, cloneElement, isValidElement } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ModifyFieldWrapperProps {\n  children: ReactNode;\n  originalValue: any;\n  currentValue: any;\n  fieldName: string;\n  isModifyMode: boolean;\n  onFieldChange?: (fieldName: string, newValue: any, oldValue: any) => void;\n}\n\nexport function ModifyFieldWrapper({ \n  children, \n  originalValue, \n  currentValue, \n  fieldName,\n  isModifyMode,\n  onFieldChange \n}: ModifyFieldWrapperProps) {\n  // Check if the field has been modified\n  const isModified = originalValue !== undefined && originalValue !== currentValue;\n  \n  // Define colors according to specifications\n  const baselineColor = \"#52BAF3\"; // Blue for editable fields\n  const changedColor = \"#FF3B30\";  // Red for changed fields\n  \n  if (!isModifyMode) {\n    return <>{children}</>;\n  }\n\n  // Clone the child element and add onChange tracking if it's a form element\n  const enhancedChildren = isValidElement(children) \n    ? cloneElement(children as any, {\n        onChange: (e: any) => {\n          // Call original onChange if it exists\n          if ((children as any).props.onChange) {\n            (children as any).props.onChange(e);\n          }\n          // Track the field change\n          if (onFieldChange) {\n            const newValue = e.target?.value !== undefined ? e.target.value : e;\n            onFieldChange(fieldName, newValue, originalValue);\n          }\n        },\n        // Apply color styling\n        style: {\n          ...(children as any).props.style,\n          borderColor: isModified ? changedColor : baselineColor,\n          borderWidth: '2px'\n        },\n        className: cn(\n          (children as any).props.className,\n          \"transition-colors duration-200\"\n        )\n      })\n    : children;\n\n  return (\n    <div className=\"relative\">\n      {/* Field wrapper with color indication */}\n      <div className={cn(\n        \"relative\",\n        isModified && \"after:absolute after:inset-0 after:border-2 after:border-[#FF3B30] after:rounded-md after:pointer-events-none\"\n      )}>\n        {enhancedChildren}\n      </div>\n      \n      {/* Visual indicator for modified fields */}\n      {isModified && (\n        <div className=\"absolute -right-2 -top-2 w-3 h-3 bg-[#FF3B30] rounded-full border-2 border-white shadow-sm\" />\n      )}\n      \n      {/* Label styling applied via CSS classes */}\n    </div>\n  );\n}"]}